//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DllTest {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ReworksDBDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ReworksDBDataSet : System.Data.DataSet {
        
        private Rew_ControllerDataTable tableRew_Controller;
        
        private Rew_ControlPointDataTable tableRew_ControlPoint;
        
        private Rew_LockerDataTable tableRew_Locker;
        
        private Rew_PlantDataTable tableRew_Plant;
        
        private Rew_RepairZoneDataTable tableRew_RepairZone;
        
        private Rew_ScanerDataTable tableRew_Scaner;
        
        private Rew_SensorDataTable tableRew_Sensor;
        
        private Rew_TerminalDataTable tableRew_Terminal;
        
        private System.Data.DataRelation relationRew_ControllerRew_Locker;
        
        private System.Data.DataRelation relationRew_PlantRew_RepairZone;
        
        private System.Data.DataRelation relationRew_ControllerRew_Scaner;
        
        private System.Data.DataRelation relationRew_ControlPointRew_Scaner;
        
        private System.Data.DataRelation relationRew_ControllerRew_Sensor;
        
        private System.Data.DataRelation relationRew_ControlPointRew_Sensor;
        
        private System.Data.DataRelation relationRew_RepairZoneRew_Terminal;
        
        private System.Data.DataRelation relationRew_ControlPointRew_Locker;
        
        private System.Data.DataRelation relationRew_RepairZoneRew_ControlPoint;
        
        private System.Data.DataRelation relationRew_PlantRew_Controller;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReworksDBDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ReworksDBDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Rew_Controller"] != null)) {
                    base.Tables.Add(new Rew_ControllerDataTable(ds.Tables["Rew_Controller"]));
                }
                if ((ds.Tables["Rew_ControlPoint"] != null)) {
                    base.Tables.Add(new Rew_ControlPointDataTable(ds.Tables["Rew_ControlPoint"]));
                }
                if ((ds.Tables["Rew_Locker"] != null)) {
                    base.Tables.Add(new Rew_LockerDataTable(ds.Tables["Rew_Locker"]));
                }
                if ((ds.Tables["Rew_Plant"] != null)) {
                    base.Tables.Add(new Rew_PlantDataTable(ds.Tables["Rew_Plant"]));
                }
                if ((ds.Tables["Rew_RepairZone"] != null)) {
                    base.Tables.Add(new Rew_RepairZoneDataTable(ds.Tables["Rew_RepairZone"]));
                }
                if ((ds.Tables["Rew_Scaner"] != null)) {
                    base.Tables.Add(new Rew_ScanerDataTable(ds.Tables["Rew_Scaner"]));
                }
                if ((ds.Tables["Rew_Sensor"] != null)) {
                    base.Tables.Add(new Rew_SensorDataTable(ds.Tables["Rew_Sensor"]));
                }
                if ((ds.Tables["Rew_Terminal"] != null)) {
                    base.Tables.Add(new Rew_TerminalDataTable(ds.Tables["Rew_Terminal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_ControllerDataTable Rew_Controller {
            get {
                return this.tableRew_Controller;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_ControlPointDataTable Rew_ControlPoint {
            get {
                return this.tableRew_ControlPoint;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_LockerDataTable Rew_Locker {
            get {
                return this.tableRew_Locker;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_PlantDataTable Rew_Plant {
            get {
                return this.tableRew_Plant;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_RepairZoneDataTable Rew_RepairZone {
            get {
                return this.tableRew_RepairZone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_ScanerDataTable Rew_Scaner {
            get {
                return this.tableRew_Scaner;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_SensorDataTable Rew_Sensor {
            get {
                return this.tableRew_Sensor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Rew_TerminalDataTable Rew_Terminal {
            get {
                return this.tableRew_Terminal;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ReworksDBDataSet cln = ((ReworksDBDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Rew_Controller"] != null)) {
                    base.Tables.Add(new Rew_ControllerDataTable(ds.Tables["Rew_Controller"]));
                }
                if ((ds.Tables["Rew_ControlPoint"] != null)) {
                    base.Tables.Add(new Rew_ControlPointDataTable(ds.Tables["Rew_ControlPoint"]));
                }
                if ((ds.Tables["Rew_Locker"] != null)) {
                    base.Tables.Add(new Rew_LockerDataTable(ds.Tables["Rew_Locker"]));
                }
                if ((ds.Tables["Rew_Plant"] != null)) {
                    base.Tables.Add(new Rew_PlantDataTable(ds.Tables["Rew_Plant"]));
                }
                if ((ds.Tables["Rew_RepairZone"] != null)) {
                    base.Tables.Add(new Rew_RepairZoneDataTable(ds.Tables["Rew_RepairZone"]));
                }
                if ((ds.Tables["Rew_Scaner"] != null)) {
                    base.Tables.Add(new Rew_ScanerDataTable(ds.Tables["Rew_Scaner"]));
                }
                if ((ds.Tables["Rew_Sensor"] != null)) {
                    base.Tables.Add(new Rew_SensorDataTable(ds.Tables["Rew_Sensor"]));
                }
                if ((ds.Tables["Rew_Terminal"] != null)) {
                    base.Tables.Add(new Rew_TerminalDataTable(ds.Tables["Rew_Terminal"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRew_Controller = ((Rew_ControllerDataTable)(base.Tables["Rew_Controller"]));
            if ((initTable == true)) {
                if ((this.tableRew_Controller != null)) {
                    this.tableRew_Controller.InitVars();
                }
            }
            this.tableRew_ControlPoint = ((Rew_ControlPointDataTable)(base.Tables["Rew_ControlPoint"]));
            if ((initTable == true)) {
                if ((this.tableRew_ControlPoint != null)) {
                    this.tableRew_ControlPoint.InitVars();
                }
            }
            this.tableRew_Locker = ((Rew_LockerDataTable)(base.Tables["Rew_Locker"]));
            if ((initTable == true)) {
                if ((this.tableRew_Locker != null)) {
                    this.tableRew_Locker.InitVars();
                }
            }
            this.tableRew_Plant = ((Rew_PlantDataTable)(base.Tables["Rew_Plant"]));
            if ((initTable == true)) {
                if ((this.tableRew_Plant != null)) {
                    this.tableRew_Plant.InitVars();
                }
            }
            this.tableRew_RepairZone = ((Rew_RepairZoneDataTable)(base.Tables["Rew_RepairZone"]));
            if ((initTable == true)) {
                if ((this.tableRew_RepairZone != null)) {
                    this.tableRew_RepairZone.InitVars();
                }
            }
            this.tableRew_Scaner = ((Rew_ScanerDataTable)(base.Tables["Rew_Scaner"]));
            if ((initTable == true)) {
                if ((this.tableRew_Scaner != null)) {
                    this.tableRew_Scaner.InitVars();
                }
            }
            this.tableRew_Sensor = ((Rew_SensorDataTable)(base.Tables["Rew_Sensor"]));
            if ((initTable == true)) {
                if ((this.tableRew_Sensor != null)) {
                    this.tableRew_Sensor.InitVars();
                }
            }
            this.tableRew_Terminal = ((Rew_TerminalDataTable)(base.Tables["Rew_Terminal"]));
            if ((initTable == true)) {
                if ((this.tableRew_Terminal != null)) {
                    this.tableRew_Terminal.InitVars();
                }
            }
            this.relationRew_ControllerRew_Locker = this.Relations["Rew_ControllerRew_Locker"];
            this.relationRew_PlantRew_RepairZone = this.Relations["Rew_PlantRew_RepairZone"];
            this.relationRew_ControllerRew_Scaner = this.Relations["Rew_ControllerRew_Scaner"];
            this.relationRew_ControlPointRew_Scaner = this.Relations["Rew_ControlPointRew_Scaner"];
            this.relationRew_ControllerRew_Sensor = this.Relations["Rew_ControllerRew_Sensor"];
            this.relationRew_ControlPointRew_Sensor = this.Relations["Rew_ControlPointRew_Sensor"];
            this.relationRew_RepairZoneRew_Terminal = this.Relations["Rew_RepairZoneRew_Terminal"];
            this.relationRew_ControlPointRew_Locker = this.Relations["Rew_ControlPointRew_Locker"];
            this.relationRew_RepairZoneRew_ControlPoint = this.Relations["Rew_RepairZoneRew_ControlPoint"];
            this.relationRew_PlantRew_Controller = this.Relations["Rew_PlantRew_Controller"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ReworksDBDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ReworksDBDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRew_Controller = new Rew_ControllerDataTable();
            base.Tables.Add(this.tableRew_Controller);
            this.tableRew_ControlPoint = new Rew_ControlPointDataTable();
            base.Tables.Add(this.tableRew_ControlPoint);
            this.tableRew_Locker = new Rew_LockerDataTable();
            base.Tables.Add(this.tableRew_Locker);
            this.tableRew_Plant = new Rew_PlantDataTable();
            base.Tables.Add(this.tableRew_Plant);
            this.tableRew_RepairZone = new Rew_RepairZoneDataTable();
            base.Tables.Add(this.tableRew_RepairZone);
            this.tableRew_Scaner = new Rew_ScanerDataTable();
            base.Tables.Add(this.tableRew_Scaner);
            this.tableRew_Sensor = new Rew_SensorDataTable();
            base.Tables.Add(this.tableRew_Sensor);
            this.tableRew_Terminal = new Rew_TerminalDataTable();
            base.Tables.Add(this.tableRew_Terminal);
            this.relationRew_ControllerRew_Locker = new System.Data.DataRelation("Rew_ControllerRew_Locker", new System.Data.DataColumn[] {
                        this.tableRew_Controller.cont_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Locker.cont_idColumn}, false);
            this.Relations.Add(this.relationRew_ControllerRew_Locker);
            this.relationRew_PlantRew_RepairZone = new System.Data.DataRelation("Rew_PlantRew_RepairZone", new System.Data.DataColumn[] {
                        this.tableRew_Plant.pl_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_RepairZone.pl_idColumn}, false);
            this.Relations.Add(this.relationRew_PlantRew_RepairZone);
            this.relationRew_ControllerRew_Scaner = new System.Data.DataRelation("Rew_ControllerRew_Scaner", new System.Data.DataColumn[] {
                        this.tableRew_Controller.cont_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Scaner.cont_idColumn}, false);
            this.Relations.Add(this.relationRew_ControllerRew_Scaner);
            this.relationRew_ControlPointRew_Scaner = new System.Data.DataRelation("Rew_ControlPointRew_Scaner", new System.Data.DataColumn[] {
                        this.tableRew_ControlPoint.cp_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Scaner.cp_idColumn}, false);
            this.Relations.Add(this.relationRew_ControlPointRew_Scaner);
            this.relationRew_ControllerRew_Sensor = new System.Data.DataRelation("Rew_ControllerRew_Sensor", new System.Data.DataColumn[] {
                        this.tableRew_Controller.cont_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Sensor.Cont_idColumn}, false);
            this.Relations.Add(this.relationRew_ControllerRew_Sensor);
            this.relationRew_ControlPointRew_Sensor = new System.Data.DataRelation("Rew_ControlPointRew_Sensor", new System.Data.DataColumn[] {
                        this.tableRew_ControlPoint.cp_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Sensor.cp_idColumn}, false);
            this.Relations.Add(this.relationRew_ControlPointRew_Sensor);
            this.relationRew_RepairZoneRew_Terminal = new System.Data.DataRelation("Rew_RepairZoneRew_Terminal", new System.Data.DataColumn[] {
                        this.tableRew_RepairZone.RZone_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Terminal.RZone_idColumn}, false);
            this.Relations.Add(this.relationRew_RepairZoneRew_Terminal);
            this.relationRew_ControlPointRew_Locker = new System.Data.DataRelation("Rew_ControlPointRew_Locker", new System.Data.DataColumn[] {
                        this.tableRew_ControlPoint.cp_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Locker.cp_idColumn}, false);
            this.Relations.Add(this.relationRew_ControlPointRew_Locker);
            this.relationRew_RepairZoneRew_ControlPoint = new System.Data.DataRelation("Rew_RepairZoneRew_ControlPoint", new System.Data.DataColumn[] {
                        this.tableRew_RepairZone.RZone_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_ControlPoint.RZone_idColumn}, false);
            this.Relations.Add(this.relationRew_RepairZoneRew_ControlPoint);
            this.relationRew_PlantRew_Controller = new System.Data.DataRelation("Rew_PlantRew_Controller", new System.Data.DataColumn[] {
                        this.tableRew_Plant.pl_idColumn}, new System.Data.DataColumn[] {
                        this.tableRew_Controller.pl_idColumn}, false);
            this.Relations.Add(this.relationRew_PlantRew_Controller);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_Controller() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_ControlPoint() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_Locker() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_Plant() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_RepairZone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_Scaner() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_Sensor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRew_Terminal() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ReworksDBDataSet ds = new ReworksDBDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void Rew_ControllerRowChangeEventHandler(object sender, Rew_ControllerRowChangeEvent e);
        
        public delegate void Rew_ControlPointRowChangeEventHandler(object sender, Rew_ControlPointRowChangeEvent e);
        
        public delegate void Rew_LockerRowChangeEventHandler(object sender, Rew_LockerRowChangeEvent e);
        
        public delegate void Rew_PlantRowChangeEventHandler(object sender, Rew_PlantRowChangeEvent e);
        
        public delegate void Rew_RepairZoneRowChangeEventHandler(object sender, Rew_RepairZoneRowChangeEvent e);
        
        public delegate void Rew_ScanerRowChangeEventHandler(object sender, Rew_ScanerRowChangeEvent e);
        
        public delegate void Rew_SensorRowChangeEventHandler(object sender, Rew_SensorRowChangeEvent e);
        
        public delegate void Rew_TerminalRowChangeEventHandler(object sender, Rew_TerminalRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_ControllerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncont_id;
            
            private System.Data.DataColumn columnpl_id;
            
            private System.Data.DataColumn columncont_name;
            
            private System.Data.DataColumn columncont_IP;
            
            private System.Data.DataColumn columncont_XPos;
            
            private System.Data.DataColumn columncont_YPos;
            
            private System.Data.DataColumn columnInputCoilStartAddress;
            
            private System.Data.DataColumn columnInputCoilUnitCount;
            
            private System.Data.DataColumn columnOutputCoilStartAddress;
            
            private System.Data.DataColumn columnOutputCoilUnitCount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerDataTable() {
                this.TableName = "Rew_Controller";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_ControllerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_ControllerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_idColumn {
                get {
                    return this.columncont_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pl_idColumn {
                get {
                    return this.columnpl_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_nameColumn {
                get {
                    return this.columncont_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_IPColumn {
                get {
                    return this.columncont_IP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_XPosColumn {
                get {
                    return this.columncont_XPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_YPosColumn {
                get {
                    return this.columncont_YPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InputCoilStartAddressColumn {
                get {
                    return this.columnInputCoilStartAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InputCoilUnitCountColumn {
                get {
                    return this.columnInputCoilUnitCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutputCoilStartAddressColumn {
                get {
                    return this.columnOutputCoilStartAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutputCoilUnitCountColumn {
                get {
                    return this.columnOutputCoilUnitCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow this[int index] {
                get {
                    return ((Rew_ControllerRow)(this.Rows[index]));
                }
            }
            
            public event Rew_ControllerRowChangeEventHandler Rew_ControllerRowChanging;
            
            public event Rew_ControllerRowChangeEventHandler Rew_ControllerRowChanged;
            
            public event Rew_ControllerRowChangeEventHandler Rew_ControllerRowDeleting;
            
            public event Rew_ControllerRowChangeEventHandler Rew_ControllerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_ControllerRow(Rew_ControllerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow AddRew_ControllerRow(int cont_id, Rew_PlantRow parentRew_PlantRowByRew_PlantRew_Controller, string cont_name, string cont_IP, int cont_XPos, int cont_YPos, int InputCoilStartAddress, int InputCoilUnitCount, int OutputCoilStartAddress, int OutputCoilUnitCount) {
                Rew_ControllerRow rowRew_ControllerRow = ((Rew_ControllerRow)(this.NewRow()));
                rowRew_ControllerRow.ItemArray = new object[] {
                        cont_id,
                        parentRew_PlantRowByRew_PlantRew_Controller[0],
                        cont_name,
                        cont_IP,
                        cont_XPos,
                        cont_YPos,
                        InputCoilStartAddress,
                        InputCoilUnitCount,
                        OutputCoilStartAddress,
                        OutputCoilUnitCount};
                this.Rows.Add(rowRew_ControllerRow);
                return rowRew_ControllerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow FindBycont_id(int cont_id) {
                return ((Rew_ControllerRow)(this.Rows.Find(new object[] {
                            cont_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_ControllerDataTable cln = ((Rew_ControllerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_ControllerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncont_id = base.Columns["cont_id"];
                this.columnpl_id = base.Columns["pl_id"];
                this.columncont_name = base.Columns["cont_name"];
                this.columncont_IP = base.Columns["cont_IP"];
                this.columncont_XPos = base.Columns["cont_XPos"];
                this.columncont_YPos = base.Columns["cont_YPos"];
                this.columnInputCoilStartAddress = base.Columns["InputCoilStartAddress"];
                this.columnInputCoilUnitCount = base.Columns["InputCoilUnitCount"];
                this.columnOutputCoilStartAddress = base.Columns["OutputCoilStartAddress"];
                this.columnOutputCoilUnitCount = base.Columns["OutputCoilUnitCount"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncont_id = new System.Data.DataColumn("cont_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_id);
                this.columnpl_id = new System.Data.DataColumn("pl_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_id);
                this.columncont_name = new System.Data.DataColumn("cont_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_name);
                this.columncont_IP = new System.Data.DataColumn("cont_IP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_IP);
                this.columncont_XPos = new System.Data.DataColumn("cont_XPos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_XPos);
                this.columncont_YPos = new System.Data.DataColumn("cont_YPos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_YPos);
                this.columnInputCoilStartAddress = new System.Data.DataColumn("InputCoilStartAddress", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputCoilStartAddress);
                this.columnInputCoilUnitCount = new System.Data.DataColumn("InputCoilUnitCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInputCoilUnitCount);
                this.columnOutputCoilStartAddress = new System.Data.DataColumn("OutputCoilStartAddress", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputCoilStartAddress);
                this.columnOutputCoilUnitCount = new System.Data.DataColumn("OutputCoilUnitCount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputCoilUnitCount);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncont_id}, true));
                this.columncont_id.AllowDBNull = false;
                this.columncont_id.Unique = true;
                this.columncont_name.MaxLength = 50;
                this.columncont_IP.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow NewRew_ControllerRow() {
                return ((Rew_ControllerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_ControllerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_ControllerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_ControllerRowChanged != null)) {
                    this.Rew_ControllerRowChanged(this, new Rew_ControllerRowChangeEvent(((Rew_ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_ControllerRowChanging != null)) {
                    this.Rew_ControllerRowChanging(this, new Rew_ControllerRowChangeEvent(((Rew_ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_ControllerRowDeleted != null)) {
                    this.Rew_ControllerRowDeleted(this, new Rew_ControllerRowChangeEvent(((Rew_ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_ControllerRowDeleting != null)) {
                    this.Rew_ControllerRowDeleting(this, new Rew_ControllerRowChangeEvent(((Rew_ControllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_ControllerRow(Rew_ControllerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_ControllerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_ControlPointDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncp_id;
            
            private System.Data.DataColumn columnRZone_id;
            
            private System.Data.DataColumn columncp_name;
            
            private System.Data.DataColumn columncp_type;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointDataTable() {
                this.TableName = "Rew_ControlPoint";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_ControlPointDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_ControlPointDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cp_idColumn {
                get {
                    return this.columncp_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_idColumn {
                get {
                    return this.columnRZone_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cp_nameColumn {
                get {
                    return this.columncp_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cp_typeColumn {
                get {
                    return this.columncp_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow this[int index] {
                get {
                    return ((Rew_ControlPointRow)(this.Rows[index]));
                }
            }
            
            public event Rew_ControlPointRowChangeEventHandler Rew_ControlPointRowChanging;
            
            public event Rew_ControlPointRowChangeEventHandler Rew_ControlPointRowChanged;
            
            public event Rew_ControlPointRowChangeEventHandler Rew_ControlPointRowDeleting;
            
            public event Rew_ControlPointRowChangeEventHandler Rew_ControlPointRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_ControlPointRow(Rew_ControlPointRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow AddRew_ControlPointRow(int cp_id, Rew_RepairZoneRow parentRew_RepairZoneRowByRew_RepairZoneRew_ControlPoint, string cp_name, int cp_type) {
                Rew_ControlPointRow rowRew_ControlPointRow = ((Rew_ControlPointRow)(this.NewRow()));
                rowRew_ControlPointRow.ItemArray = new object[] {
                        cp_id,
                        parentRew_RepairZoneRowByRew_RepairZoneRew_ControlPoint[0],
                        cp_name,
                        cp_type};
                this.Rows.Add(rowRew_ControlPointRow);
                return rowRew_ControlPointRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow FindBycp_id(int cp_id) {
                return ((Rew_ControlPointRow)(this.Rows.Find(new object[] {
                            cp_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_ControlPointDataTable cln = ((Rew_ControlPointDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_ControlPointDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncp_id = base.Columns["cp_id"];
                this.columnRZone_id = base.Columns["RZone_id"];
                this.columncp_name = base.Columns["cp_name"];
                this.columncp_type = base.Columns["cp_type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncp_id = new System.Data.DataColumn("cp_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncp_id);
                this.columnRZone_id = new System.Data.DataColumn("RZone_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_id);
                this.columncp_name = new System.Data.DataColumn("cp_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncp_name);
                this.columncp_type = new System.Data.DataColumn("cp_type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncp_type);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncp_id}, true));
                this.columncp_id.AllowDBNull = false;
                this.columncp_id.Unique = true;
                this.columncp_name.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow NewRew_ControlPointRow() {
                return ((Rew_ControlPointRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_ControlPointRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_ControlPointRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_ControlPointRowChanged != null)) {
                    this.Rew_ControlPointRowChanged(this, new Rew_ControlPointRowChangeEvent(((Rew_ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_ControlPointRowChanging != null)) {
                    this.Rew_ControlPointRowChanging(this, new Rew_ControlPointRowChangeEvent(((Rew_ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_ControlPointRowDeleted != null)) {
                    this.Rew_ControlPointRowDeleted(this, new Rew_ControlPointRowChangeEvent(((Rew_ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_ControlPointRowDeleting != null)) {
                    this.Rew_ControlPointRowDeleting(this, new Rew_ControlPointRowChangeEvent(((Rew_ControlPointRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_ControlPointRow(Rew_ControlPointRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_ControlPointDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_LockerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnloc_id;
            
            private System.Data.DataColumn columncont_id;
            
            private System.Data.DataColumn columncp_id;
            
            private System.Data.DataColumn columnloc_type;
            
            private System.Data.DataColumn columnloc_adress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerDataTable() {
                this.TableName = "Rew_Locker";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_LockerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_LockerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn loc_idColumn {
                get {
                    return this.columnloc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_idColumn {
                get {
                    return this.columncont_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cp_idColumn {
                get {
                    return this.columncp_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn loc_typeColumn {
                get {
                    return this.columnloc_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn loc_adressColumn {
                get {
                    return this.columnloc_adress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow this[int index] {
                get {
                    return ((Rew_LockerRow)(this.Rows[index]));
                }
            }
            
            public event Rew_LockerRowChangeEventHandler Rew_LockerRowChanging;
            
            public event Rew_LockerRowChangeEventHandler Rew_LockerRowChanged;
            
            public event Rew_LockerRowChangeEventHandler Rew_LockerRowDeleting;
            
            public event Rew_LockerRowChangeEventHandler Rew_LockerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_LockerRow(Rew_LockerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow AddRew_LockerRow(int loc_id, Rew_ControllerRow parentRew_ControllerRowByRew_ControllerRew_Locker, Rew_ControlPointRow parentRew_ControlPointRowByRew_ControlPointRew_Locker, int loc_type, int loc_adress) {
                Rew_LockerRow rowRew_LockerRow = ((Rew_LockerRow)(this.NewRow()));
                rowRew_LockerRow.ItemArray = new object[] {
                        loc_id,
                        parentRew_ControllerRowByRew_ControllerRew_Locker[0],
                        parentRew_ControlPointRowByRew_ControlPointRew_Locker[0],
                        loc_type,
                        loc_adress};
                this.Rows.Add(rowRew_LockerRow);
                return rowRew_LockerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow FindByloc_id(int loc_id) {
                return ((Rew_LockerRow)(this.Rows.Find(new object[] {
                            loc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_LockerDataTable cln = ((Rew_LockerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_LockerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnloc_id = base.Columns["loc_id"];
                this.columncont_id = base.Columns["cont_id"];
                this.columncp_id = base.Columns["cp_id"];
                this.columnloc_type = base.Columns["loc_type"];
                this.columnloc_adress = base.Columns["loc_adress"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnloc_id = new System.Data.DataColumn("loc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnloc_id);
                this.columncont_id = new System.Data.DataColumn("cont_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_id);
                this.columncp_id = new System.Data.DataColumn("cp_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncp_id);
                this.columnloc_type = new System.Data.DataColumn("loc_type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnloc_type);
                this.columnloc_adress = new System.Data.DataColumn("loc_adress", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnloc_adress);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnloc_id}, true));
                this.columnloc_id.AllowDBNull = false;
                this.columnloc_id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow NewRew_LockerRow() {
                return ((Rew_LockerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_LockerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_LockerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_LockerRowChanged != null)) {
                    this.Rew_LockerRowChanged(this, new Rew_LockerRowChangeEvent(((Rew_LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_LockerRowChanging != null)) {
                    this.Rew_LockerRowChanging(this, new Rew_LockerRowChangeEvent(((Rew_LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_LockerRowDeleted != null)) {
                    this.Rew_LockerRowDeleted(this, new Rew_LockerRowChangeEvent(((Rew_LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_LockerRowDeleting != null)) {
                    this.Rew_LockerRowDeleting(this, new Rew_LockerRowChangeEvent(((Rew_LockerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_LockerRow(Rew_LockerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_LockerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_PlantDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpl_id;
            
            private System.Data.DataColumn columnpl_name;
            
            private System.Data.DataColumn columnpl_name_eng;
            
            private System.Data.DataColumn columnpl_corp_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantDataTable() {
                this.TableName = "Rew_Plant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_PlantDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_PlantDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pl_idColumn {
                get {
                    return this.columnpl_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pl_nameColumn {
                get {
                    return this.columnpl_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pl_name_engColumn {
                get {
                    return this.columnpl_name_eng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pl_corp_idColumn {
                get {
                    return this.columnpl_corp_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow this[int index] {
                get {
                    return ((Rew_PlantRow)(this.Rows[index]));
                }
            }
            
            public event Rew_PlantRowChangeEventHandler Rew_PlantRowChanging;
            
            public event Rew_PlantRowChangeEventHandler Rew_PlantRowChanged;
            
            public event Rew_PlantRowChangeEventHandler Rew_PlantRowDeleting;
            
            public event Rew_PlantRowChangeEventHandler Rew_PlantRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_PlantRow(Rew_PlantRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow AddRew_PlantRow(int pl_id, string pl_name, string pl_name_eng, string pl_corp_id) {
                Rew_PlantRow rowRew_PlantRow = ((Rew_PlantRow)(this.NewRow()));
                rowRew_PlantRow.ItemArray = new object[] {
                        pl_id,
                        pl_name,
                        pl_name_eng,
                        pl_corp_id};
                this.Rows.Add(rowRew_PlantRow);
                return rowRew_PlantRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow FindBypl_id(int pl_id) {
                return ((Rew_PlantRow)(this.Rows.Find(new object[] {
                            pl_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_PlantDataTable cln = ((Rew_PlantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_PlantDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpl_id = base.Columns["pl_id"];
                this.columnpl_name = base.Columns["pl_name"];
                this.columnpl_name_eng = base.Columns["pl_name_eng"];
                this.columnpl_corp_id = base.Columns["pl_corp_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpl_id = new System.Data.DataColumn("pl_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_id);
                this.columnpl_name = new System.Data.DataColumn("pl_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_name);
                this.columnpl_name_eng = new System.Data.DataColumn("pl_name_eng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_name_eng);
                this.columnpl_corp_id = new System.Data.DataColumn("pl_corp_id", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_corp_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnpl_id}, true));
                this.columnpl_id.AllowDBNull = false;
                this.columnpl_id.Unique = true;
                this.columnpl_name.MaxLength = 50;
                this.columnpl_name_eng.MaxLength = 50;
                this.columnpl_corp_id.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow NewRew_PlantRow() {
                return ((Rew_PlantRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_PlantRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_PlantRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_PlantRowChanged != null)) {
                    this.Rew_PlantRowChanged(this, new Rew_PlantRowChangeEvent(((Rew_PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_PlantRowChanging != null)) {
                    this.Rew_PlantRowChanging(this, new Rew_PlantRowChangeEvent(((Rew_PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_PlantRowDeleted != null)) {
                    this.Rew_PlantRowDeleted(this, new Rew_PlantRowChangeEvent(((Rew_PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_PlantRowDeleting != null)) {
                    this.Rew_PlantRowDeleting(this, new Rew_PlantRowChangeEvent(((Rew_PlantRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_PlantRow(Rew_PlantRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_PlantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_RepairZoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRZone_id;
            
            private System.Data.DataColumn columnpl_id;
            
            private System.Data.DataColumn columnRZone_Name;
            
            private System.Data.DataColumn columnRZone_Name_Eng;
            
            private System.Data.DataColumn columnRZone_X1Pos;
            
            private System.Data.DataColumn columnRZone_Y1Pos;
            
            private System.Data.DataColumn columnRZone_X2Pos;
            
            private System.Data.DataColumn columnRZone_Y2Pos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneDataTable() {
                this.TableName = "Rew_RepairZone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_RepairZoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_RepairZoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_idColumn {
                get {
                    return this.columnRZone_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pl_idColumn {
                get {
                    return this.columnpl_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_NameColumn {
                get {
                    return this.columnRZone_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_Name_EngColumn {
                get {
                    return this.columnRZone_Name_Eng;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_X1PosColumn {
                get {
                    return this.columnRZone_X1Pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_Y1PosColumn {
                get {
                    return this.columnRZone_Y1Pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_X2PosColumn {
                get {
                    return this.columnRZone_X2Pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_Y2PosColumn {
                get {
                    return this.columnRZone_Y2Pos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow this[int index] {
                get {
                    return ((Rew_RepairZoneRow)(this.Rows[index]));
                }
            }
            
            public event Rew_RepairZoneRowChangeEventHandler Rew_RepairZoneRowChanging;
            
            public event Rew_RepairZoneRowChangeEventHandler Rew_RepairZoneRowChanged;
            
            public event Rew_RepairZoneRowChangeEventHandler Rew_RepairZoneRowDeleting;
            
            public event Rew_RepairZoneRowChangeEventHandler Rew_RepairZoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_RepairZoneRow(Rew_RepairZoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow AddRew_RepairZoneRow(int RZone_id, Rew_PlantRow parentRew_PlantRowByRew_PlantRew_RepairZone, string RZone_Name, string RZone_Name_Eng, int RZone_X1Pos, int RZone_Y1Pos, int RZone_X2Pos, int RZone_Y2Pos) {
                Rew_RepairZoneRow rowRew_RepairZoneRow = ((Rew_RepairZoneRow)(this.NewRow()));
                rowRew_RepairZoneRow.ItemArray = new object[] {
                        RZone_id,
                        parentRew_PlantRowByRew_PlantRew_RepairZone[0],
                        RZone_Name,
                        RZone_Name_Eng,
                        RZone_X1Pos,
                        RZone_Y1Pos,
                        RZone_X2Pos,
                        RZone_Y2Pos};
                this.Rows.Add(rowRew_RepairZoneRow);
                return rowRew_RepairZoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow FindByRZone_id(int RZone_id) {
                return ((Rew_RepairZoneRow)(this.Rows.Find(new object[] {
                            RZone_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_RepairZoneDataTable cln = ((Rew_RepairZoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_RepairZoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRZone_id = base.Columns["RZone_id"];
                this.columnpl_id = base.Columns["pl_id"];
                this.columnRZone_Name = base.Columns["RZone_Name"];
                this.columnRZone_Name_Eng = base.Columns["RZone_Name_Eng"];
                this.columnRZone_X1Pos = base.Columns["RZone_X1Pos"];
                this.columnRZone_Y1Pos = base.Columns["RZone_Y1Pos"];
                this.columnRZone_X2Pos = base.Columns["RZone_X2Pos"];
                this.columnRZone_Y2Pos = base.Columns["RZone_Y2Pos"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRZone_id = new System.Data.DataColumn("RZone_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_id);
                this.columnpl_id = new System.Data.DataColumn("pl_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpl_id);
                this.columnRZone_Name = new System.Data.DataColumn("RZone_Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_Name);
                this.columnRZone_Name_Eng = new System.Data.DataColumn("RZone_Name_Eng", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_Name_Eng);
                this.columnRZone_X1Pos = new System.Data.DataColumn("RZone_X1Pos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_X1Pos);
                this.columnRZone_Y1Pos = new System.Data.DataColumn("RZone_Y1Pos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_Y1Pos);
                this.columnRZone_X2Pos = new System.Data.DataColumn("RZone_X2Pos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_X2Pos);
                this.columnRZone_Y2Pos = new System.Data.DataColumn("RZone_Y2Pos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_Y2Pos);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRZone_id}, true));
                this.columnRZone_id.AllowDBNull = false;
                this.columnRZone_id.Unique = true;
                this.columnRZone_Name.MaxLength = 50;
                this.columnRZone_Name_Eng.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow NewRew_RepairZoneRow() {
                return ((Rew_RepairZoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_RepairZoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_RepairZoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_RepairZoneRowChanged != null)) {
                    this.Rew_RepairZoneRowChanged(this, new Rew_RepairZoneRowChangeEvent(((Rew_RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_RepairZoneRowChanging != null)) {
                    this.Rew_RepairZoneRowChanging(this, new Rew_RepairZoneRowChangeEvent(((Rew_RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_RepairZoneRowDeleted != null)) {
                    this.Rew_RepairZoneRowDeleted(this, new Rew_RepairZoneRowChangeEvent(((Rew_RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_RepairZoneRowDeleting != null)) {
                    this.Rew_RepairZoneRowDeleting(this, new Rew_RepairZoneRowChangeEvent(((Rew_RepairZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_RepairZoneRow(Rew_RepairZoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_RepairZoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_ScanerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnscan_id;
            
            private System.Data.DataColumn columncp_id;
            
            private System.Data.DataColumn columncont_id;
            
            private System.Data.DataColumn columnscan_name;
            
            private System.Data.DataColumn columnscan_type;
            
            private System.Data.DataColumn columnscan_adress;
            
            private System.Data.DataColumn columnscan_XPos;
            
            private System.Data.DataColumn columnscan_YPos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerDataTable() {
                this.TableName = "Rew_Scaner";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_ScanerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_ScanerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scan_idColumn {
                get {
                    return this.columnscan_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cp_idColumn {
                get {
                    return this.columncp_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cont_idColumn {
                get {
                    return this.columncont_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scan_nameColumn {
                get {
                    return this.columnscan_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scan_typeColumn {
                get {
                    return this.columnscan_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scan_adressColumn {
                get {
                    return this.columnscan_adress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scan_XPosColumn {
                get {
                    return this.columnscan_XPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scan_YPosColumn {
                get {
                    return this.columnscan_YPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow this[int index] {
                get {
                    return ((Rew_ScanerRow)(this.Rows[index]));
                }
            }
            
            public event Rew_ScanerRowChangeEventHandler Rew_ScanerRowChanging;
            
            public event Rew_ScanerRowChangeEventHandler Rew_ScanerRowChanged;
            
            public event Rew_ScanerRowChangeEventHandler Rew_ScanerRowDeleting;
            
            public event Rew_ScanerRowChangeEventHandler Rew_ScanerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_ScanerRow(Rew_ScanerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow AddRew_ScanerRow(int scan_id, Rew_ControlPointRow parentRew_ControlPointRowByRew_ControlPointRew_Scaner, Rew_ControllerRow parentRew_ControllerRowByRew_ControllerRew_Scaner, string scan_name, int scan_type, int scan_adress, int scan_XPos, int scan_YPos) {
                Rew_ScanerRow rowRew_ScanerRow = ((Rew_ScanerRow)(this.NewRow()));
                rowRew_ScanerRow.ItemArray = new object[] {
                        scan_id,
                        parentRew_ControlPointRowByRew_ControlPointRew_Scaner[0],
                        parentRew_ControllerRowByRew_ControllerRew_Scaner[0],
                        scan_name,
                        scan_type,
                        scan_adress,
                        scan_XPos,
                        scan_YPos};
                this.Rows.Add(rowRew_ScanerRow);
                return rowRew_ScanerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow FindByscan_id(int scan_id) {
                return ((Rew_ScanerRow)(this.Rows.Find(new object[] {
                            scan_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_ScanerDataTable cln = ((Rew_ScanerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_ScanerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscan_id = base.Columns["scan_id"];
                this.columncp_id = base.Columns["cp_id"];
                this.columncont_id = base.Columns["cont_id"];
                this.columnscan_name = base.Columns["scan_name"];
                this.columnscan_type = base.Columns["scan_type"];
                this.columnscan_adress = base.Columns["scan_adress"];
                this.columnscan_XPos = base.Columns["scan_XPos"];
                this.columnscan_YPos = base.Columns["scan_YPos"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscan_id = new System.Data.DataColumn("scan_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscan_id);
                this.columncp_id = new System.Data.DataColumn("cp_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncp_id);
                this.columncont_id = new System.Data.DataColumn("cont_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncont_id);
                this.columnscan_name = new System.Data.DataColumn("scan_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscan_name);
                this.columnscan_type = new System.Data.DataColumn("scan_type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscan_type);
                this.columnscan_adress = new System.Data.DataColumn("scan_adress", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscan_adress);
                this.columnscan_XPos = new System.Data.DataColumn("scan_XPos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscan_XPos);
                this.columnscan_YPos = new System.Data.DataColumn("scan_YPos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscan_YPos);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnscan_id}, true));
                this.columnscan_id.AllowDBNull = false;
                this.columnscan_id.Unique = true;
                this.columnscan_name.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow NewRew_ScanerRow() {
                return ((Rew_ScanerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_ScanerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_ScanerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_ScanerRowChanged != null)) {
                    this.Rew_ScanerRowChanged(this, new Rew_ScanerRowChangeEvent(((Rew_ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_ScanerRowChanging != null)) {
                    this.Rew_ScanerRowChanging(this, new Rew_ScanerRowChangeEvent(((Rew_ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_ScanerRowDeleted != null)) {
                    this.Rew_ScanerRowDeleted(this, new Rew_ScanerRowChangeEvent(((Rew_ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_ScanerRowDeleting != null)) {
                    this.Rew_ScanerRowDeleting(this, new Rew_ScanerRowChangeEvent(((Rew_ScanerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_ScanerRow(Rew_ScanerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_ScanerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_SensorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsens_id;
            
            private System.Data.DataColumn columncp_id;
            
            private System.Data.DataColumn columnCont_id;
            
            private System.Data.DataColumn columnsens_type;
            
            private System.Data.DataColumn columnsens_adress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorDataTable() {
                this.TableName = "Rew_Sensor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_SensorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_SensorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sens_idColumn {
                get {
                    return this.columnsens_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cp_idColumn {
                get {
                    return this.columncp_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Cont_idColumn {
                get {
                    return this.columnCont_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sens_typeColumn {
                get {
                    return this.columnsens_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sens_adressColumn {
                get {
                    return this.columnsens_adress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow this[int index] {
                get {
                    return ((Rew_SensorRow)(this.Rows[index]));
                }
            }
            
            public event Rew_SensorRowChangeEventHandler Rew_SensorRowChanging;
            
            public event Rew_SensorRowChangeEventHandler Rew_SensorRowChanged;
            
            public event Rew_SensorRowChangeEventHandler Rew_SensorRowDeleting;
            
            public event Rew_SensorRowChangeEventHandler Rew_SensorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_SensorRow(Rew_SensorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow AddRew_SensorRow(int sens_id, Rew_ControlPointRow parentRew_ControlPointRowByRew_ControlPointRew_Sensor, Rew_ControllerRow parentRew_ControllerRowByRew_ControllerRew_Sensor, int sens_type, int sens_adress) {
                Rew_SensorRow rowRew_SensorRow = ((Rew_SensorRow)(this.NewRow()));
                rowRew_SensorRow.ItemArray = new object[] {
                        sens_id,
                        parentRew_ControlPointRowByRew_ControlPointRew_Sensor[0],
                        parentRew_ControllerRowByRew_ControllerRew_Sensor[0],
                        sens_type,
                        sens_adress};
                this.Rows.Add(rowRew_SensorRow);
                return rowRew_SensorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow FindBysens_id(int sens_id) {
                return ((Rew_SensorRow)(this.Rows.Find(new object[] {
                            sens_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_SensorDataTable cln = ((Rew_SensorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_SensorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsens_id = base.Columns["sens_id"];
                this.columncp_id = base.Columns["cp_id"];
                this.columnCont_id = base.Columns["Cont_id"];
                this.columnsens_type = base.Columns["sens_type"];
                this.columnsens_adress = base.Columns["sens_adress"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsens_id = new System.Data.DataColumn("sens_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsens_id);
                this.columncp_id = new System.Data.DataColumn("cp_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncp_id);
                this.columnCont_id = new System.Data.DataColumn("Cont_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCont_id);
                this.columnsens_type = new System.Data.DataColumn("sens_type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsens_type);
                this.columnsens_adress = new System.Data.DataColumn("sens_adress", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsens_adress);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnsens_id}, true));
                this.columnsens_id.AllowDBNull = false;
                this.columnsens_id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow NewRew_SensorRow() {
                return ((Rew_SensorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_SensorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_SensorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_SensorRowChanged != null)) {
                    this.Rew_SensorRowChanged(this, new Rew_SensorRowChangeEvent(((Rew_SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_SensorRowChanging != null)) {
                    this.Rew_SensorRowChanging(this, new Rew_SensorRowChangeEvent(((Rew_SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_SensorRowDeleted != null)) {
                    this.Rew_SensorRowDeleted(this, new Rew_SensorRowChangeEvent(((Rew_SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_SensorRowDeleting != null)) {
                    this.Rew_SensorRowDeleting(this, new Rew_SensorRowChangeEvent(((Rew_SensorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_SensorRow(Rew_SensorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_SensorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Rew_TerminalDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnterm_id;
            
            private System.Data.DataColumn columnRZone_id;
            
            private System.Data.DataColumn columnterm_name;
            
            private System.Data.DataColumn columnterm_IP;
            
            private System.Data.DataColumn columnterm_XPos;
            
            private System.Data.DataColumn columnterm_YPos;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalDataTable() {
                this.TableName = "Rew_Terminal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_TerminalDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Rew_TerminalDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn term_idColumn {
                get {
                    return this.columnterm_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RZone_idColumn {
                get {
                    return this.columnRZone_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn term_nameColumn {
                get {
                    return this.columnterm_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn term_IPColumn {
                get {
                    return this.columnterm_IP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn term_XPosColumn {
                get {
                    return this.columnterm_XPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn term_YPosColumn {
                get {
                    return this.columnterm_YPos;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRow this[int index] {
                get {
                    return ((Rew_TerminalRow)(this.Rows[index]));
                }
            }
            
            public event Rew_TerminalRowChangeEventHandler Rew_TerminalRowChanging;
            
            public event Rew_TerminalRowChangeEventHandler Rew_TerminalRowChanged;
            
            public event Rew_TerminalRowChangeEventHandler Rew_TerminalRowDeleting;
            
            public event Rew_TerminalRowChangeEventHandler Rew_TerminalRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRew_TerminalRow(Rew_TerminalRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRow AddRew_TerminalRow(int term_id, Rew_RepairZoneRow parentRew_RepairZoneRowByRew_RepairZoneRew_Terminal, string term_name, string term_IP, int term_XPos, int term_YPos) {
                Rew_TerminalRow rowRew_TerminalRow = ((Rew_TerminalRow)(this.NewRow()));
                rowRew_TerminalRow.ItemArray = new object[] {
                        term_id,
                        parentRew_RepairZoneRowByRew_RepairZoneRew_Terminal[0],
                        term_name,
                        term_IP,
                        term_XPos,
                        term_YPos};
                this.Rows.Add(rowRew_TerminalRow);
                return rowRew_TerminalRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRow FindByterm_id(int term_id) {
                return ((Rew_TerminalRow)(this.Rows.Find(new object[] {
                            term_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Rew_TerminalDataTable cln = ((Rew_TerminalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Rew_TerminalDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnterm_id = base.Columns["term_id"];
                this.columnRZone_id = base.Columns["RZone_id"];
                this.columnterm_name = base.Columns["term_name"];
                this.columnterm_IP = base.Columns["term_IP"];
                this.columnterm_XPos = base.Columns["term_XPos"];
                this.columnterm_YPos = base.Columns["term_YPos"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnterm_id = new System.Data.DataColumn("term_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterm_id);
                this.columnRZone_id = new System.Data.DataColumn("RZone_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRZone_id);
                this.columnterm_name = new System.Data.DataColumn("term_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterm_name);
                this.columnterm_IP = new System.Data.DataColumn("term_IP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterm_IP);
                this.columnterm_XPos = new System.Data.DataColumn("term_XPos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterm_XPos);
                this.columnterm_YPos = new System.Data.DataColumn("term_YPos", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnterm_YPos);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnterm_id}, true));
                this.columnterm_id.AllowDBNull = false;
                this.columnterm_id.Unique = true;
                this.columnterm_name.MaxLength = 50;
                this.columnterm_IP.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRow NewRew_TerminalRow() {
                return ((Rew_TerminalRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Rew_TerminalRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Rew_TerminalRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Rew_TerminalRowChanged != null)) {
                    this.Rew_TerminalRowChanged(this, new Rew_TerminalRowChangeEvent(((Rew_TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Rew_TerminalRowChanging != null)) {
                    this.Rew_TerminalRowChanging(this, new Rew_TerminalRowChangeEvent(((Rew_TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Rew_TerminalRowDeleted != null)) {
                    this.Rew_TerminalRowDeleted(this, new Rew_TerminalRowChangeEvent(((Rew_TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Rew_TerminalRowDeleting != null)) {
                    this.Rew_TerminalRowDeleting(this, new Rew_TerminalRowChangeEvent(((Rew_TerminalRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRew_TerminalRow(Rew_TerminalRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ReworksDBDataSet ds = new ReworksDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Rew_TerminalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_ControllerRow : System.Data.DataRow {
            
            private Rew_ControllerDataTable tableRew_Controller;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_ControllerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_Controller = ((Rew_ControllerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cont_id {
                get {
                    return ((int)(this[this.tableRew_Controller.cont_idColumn]));
                }
                set {
                    this[this.tableRew_Controller.cont_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pl_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.pl_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pl_id\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.pl_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_name {
                get {
                    try {
                        return ((string)(this[this.tableRew_Controller.cont_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cont_name\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.cont_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cont_IP {
                get {
                    try {
                        return ((string)(this[this.tableRew_Controller.cont_IPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cont_IP\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.cont_IPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cont_XPos {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.cont_XPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cont_XPos\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.cont_XPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cont_YPos {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.cont_YPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cont_YPos\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.cont_YPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InputCoilStartAddress {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.InputCoilStartAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InputCoilStartAddress\' in table \'Rew_Controller\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.InputCoilStartAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InputCoilUnitCount {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.InputCoilUnitCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InputCoilUnitCount\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.InputCoilUnitCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OutputCoilStartAddress {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.OutputCoilStartAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OutputCoilStartAddress\' in table \'Rew_Controller\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.OutputCoilStartAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OutputCoilUnitCount {
                get {
                    try {
                        return ((int)(this[this.tableRew_Controller.OutputCoilUnitCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OutputCoilUnitCount\' in table \'Rew_Controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Controller.OutputCoilUnitCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow Rew_PlantRow {
                get {
                    return ((Rew_PlantRow)(this.GetParentRow(this.Table.ParentRelations["Rew_PlantRew_Controller"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_PlantRew_Controller"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispl_idNull() {
                return this.IsNull(this.tableRew_Controller.pl_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpl_idNull() {
                this[this.tableRew_Controller.pl_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscont_nameNull() {
                return this.IsNull(this.tableRew_Controller.cont_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcont_nameNull() {
                this[this.tableRew_Controller.cont_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscont_IPNull() {
                return this.IsNull(this.tableRew_Controller.cont_IPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcont_IPNull() {
                this[this.tableRew_Controller.cont_IPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscont_XPosNull() {
                return this.IsNull(this.tableRew_Controller.cont_XPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcont_XPosNull() {
                this[this.tableRew_Controller.cont_XPosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscont_YPosNull() {
                return this.IsNull(this.tableRew_Controller.cont_YPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcont_YPosNull() {
                this[this.tableRew_Controller.cont_YPosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputCoilStartAddressNull() {
                return this.IsNull(this.tableRew_Controller.InputCoilStartAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputCoilStartAddressNull() {
                this[this.tableRew_Controller.InputCoilStartAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputCoilUnitCountNull() {
                return this.IsNull(this.tableRew_Controller.InputCoilUnitCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputCoilUnitCountNull() {
                this[this.tableRew_Controller.InputCoilUnitCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutputCoilStartAddressNull() {
                return this.IsNull(this.tableRew_Controller.OutputCoilStartAddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutputCoilStartAddressNull() {
                this[this.tableRew_Controller.OutputCoilStartAddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutputCoilUnitCountNull() {
                return this.IsNull(this.tableRew_Controller.OutputCoilUnitCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutputCoilUnitCountNull() {
                this[this.tableRew_Controller.OutputCoilUnitCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow[] GetRew_LockerRows() {
                return ((Rew_LockerRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_ControllerRew_Locker"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow[] GetRew_ScanerRows() {
                return ((Rew_ScanerRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_ControllerRew_Scaner"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow[] GetRew_SensorRows() {
                return ((Rew_SensorRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_ControllerRew_Sensor"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_ControlPointRow : System.Data.DataRow {
            
            private Rew_ControlPointDataTable tableRew_ControlPoint;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_ControlPointRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_ControlPoint = ((Rew_ControlPointDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cp_id {
                get {
                    return ((int)(this[this.tableRew_ControlPoint.cp_idColumn]));
                }
                set {
                    this[this.tableRew_ControlPoint.cp_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_ControlPoint.RZone_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_id\' in table \'Rew_ControlPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_ControlPoint.RZone_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cp_name {
                get {
                    try {
                        return ((string)(this[this.tableRew_ControlPoint.cp_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cp_name\' in table \'Rew_ControlPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_ControlPoint.cp_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cp_type {
                get {
                    try {
                        return ((int)(this[this.tableRew_ControlPoint.cp_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cp_type\' in table \'Rew_ControlPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_ControlPoint.cp_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow Rew_RepairZoneRow {
                get {
                    return ((Rew_RepairZoneRow)(this.GetParentRow(this.Table.ParentRelations["Rew_RepairZoneRew_ControlPoint"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_RepairZoneRew_ControlPoint"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_idNull() {
                return this.IsNull(this.tableRew_ControlPoint.RZone_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_idNull() {
                this[this.tableRew_ControlPoint.RZone_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscp_nameNull() {
                return this.IsNull(this.tableRew_ControlPoint.cp_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcp_nameNull() {
                this[this.tableRew_ControlPoint.cp_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscp_typeNull() {
                return this.IsNull(this.tableRew_ControlPoint.cp_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcp_typeNull() {
                this[this.tableRew_ControlPoint.cp_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow[] GetRew_ScanerRows() {
                return ((Rew_ScanerRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_ControlPointRew_Scaner"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow[] GetRew_SensorRows() {
                return ((Rew_SensorRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_ControlPointRew_Sensor"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow[] GetRew_LockerRows() {
                return ((Rew_LockerRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_ControlPointRew_Locker"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_LockerRow : System.Data.DataRow {
            
            private Rew_LockerDataTable tableRew_Locker;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_LockerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_Locker = ((Rew_LockerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int loc_id {
                get {
                    return ((int)(this[this.tableRew_Locker.loc_idColumn]));
                }
                set {
                    this[this.tableRew_Locker.loc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cont_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Locker.cont_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cont_id\' in table \'Rew_Locker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Locker.cont_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cp_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Locker.cp_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cp_id\' in table \'Rew_Locker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Locker.cp_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int loc_type {
                get {
                    try {
                        return ((int)(this[this.tableRew_Locker.loc_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'loc_type\' in table \'Rew_Locker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Locker.loc_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int loc_adress {
                get {
                    try {
                        return ((int)(this[this.tableRew_Locker.loc_adressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'loc_adress\' in table \'Rew_Locker\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Locker.loc_adressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow Rew_ControllerRow {
                get {
                    return ((Rew_ControllerRow)(this.GetParentRow(this.Table.ParentRelations["Rew_ControllerRew_Locker"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_ControllerRew_Locker"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow Rew_ControlPointRow {
                get {
                    return ((Rew_ControlPointRow)(this.GetParentRow(this.Table.ParentRelations["Rew_ControlPointRew_Locker"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_ControlPointRew_Locker"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscont_idNull() {
                return this.IsNull(this.tableRew_Locker.cont_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcont_idNull() {
                this[this.tableRew_Locker.cont_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscp_idNull() {
                return this.IsNull(this.tableRew_Locker.cp_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcp_idNull() {
                this[this.tableRew_Locker.cp_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isloc_typeNull() {
                return this.IsNull(this.tableRew_Locker.loc_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setloc_typeNull() {
                this[this.tableRew_Locker.loc_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isloc_adressNull() {
                return this.IsNull(this.tableRew_Locker.loc_adressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setloc_adressNull() {
                this[this.tableRew_Locker.loc_adressColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_PlantRow : System.Data.DataRow {
            
            private Rew_PlantDataTable tableRew_Plant;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_PlantRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_Plant = ((Rew_PlantDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pl_id {
                get {
                    return ((int)(this[this.tableRew_Plant.pl_idColumn]));
                }
                set {
                    this[this.tableRew_Plant.pl_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pl_name {
                get {
                    try {
                        return ((string)(this[this.tableRew_Plant.pl_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pl_name\' in table \'Rew_Plant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Plant.pl_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pl_name_eng {
                get {
                    try {
                        return ((string)(this[this.tableRew_Plant.pl_name_engColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pl_name_eng\' in table \'Rew_Plant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Plant.pl_name_engColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pl_corp_id {
                get {
                    try {
                        return ((string)(this[this.tableRew_Plant.pl_corp_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pl_corp_id\' in table \'Rew_Plant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Plant.pl_corp_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispl_nameNull() {
                return this.IsNull(this.tableRew_Plant.pl_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpl_nameNull() {
                this[this.tableRew_Plant.pl_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispl_name_engNull() {
                return this.IsNull(this.tableRew_Plant.pl_name_engColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpl_name_engNull() {
                this[this.tableRew_Plant.pl_name_engColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispl_corp_idNull() {
                return this.IsNull(this.tableRew_Plant.pl_corp_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpl_corp_idNull() {
                this[this.tableRew_Plant.pl_corp_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow[] GetRew_RepairZoneRows() {
                return ((Rew_RepairZoneRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_PlantRew_RepairZone"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow[] GetRew_ControllerRows() {
                return ((Rew_ControllerRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_PlantRew_Controller"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_RepairZoneRow : System.Data.DataRow {
            
            private Rew_RepairZoneDataTable tableRew_RepairZone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_RepairZoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_RepairZone = ((Rew_RepairZoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_id {
                get {
                    return ((int)(this[this.tableRew_RepairZone.RZone_idColumn]));
                }
                set {
                    this[this.tableRew_RepairZone.RZone_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pl_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_RepairZone.pl_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pl_id\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.pl_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RZone_Name {
                get {
                    try {
                        return ((string)(this[this.tableRew_RepairZone.RZone_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_Name\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.RZone_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RZone_Name_Eng {
                get {
                    try {
                        return ((string)(this[this.tableRew_RepairZone.RZone_Name_EngColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_Name_Eng\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.RZone_Name_EngColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_X1Pos {
                get {
                    try {
                        return ((int)(this[this.tableRew_RepairZone.RZone_X1PosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_X1Pos\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.RZone_X1PosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_Y1Pos {
                get {
                    try {
                        return ((int)(this[this.tableRew_RepairZone.RZone_Y1PosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_Y1Pos\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.RZone_Y1PosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_X2Pos {
                get {
                    try {
                        return ((int)(this[this.tableRew_RepairZone.RZone_X2PosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_X2Pos\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.RZone_X2PosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_Y2Pos {
                get {
                    try {
                        return ((int)(this[this.tableRew_RepairZone.RZone_Y2PosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_Y2Pos\' in table \'Rew_RepairZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_RepairZone.RZone_Y2PosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow Rew_PlantRow {
                get {
                    return ((Rew_PlantRow)(this.GetParentRow(this.Table.ParentRelations["Rew_PlantRew_RepairZone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_PlantRew_RepairZone"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispl_idNull() {
                return this.IsNull(this.tableRew_RepairZone.pl_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpl_idNull() {
                this[this.tableRew_RepairZone.pl_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_NameNull() {
                return this.IsNull(this.tableRew_RepairZone.RZone_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_NameNull() {
                this[this.tableRew_RepairZone.RZone_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_Name_EngNull() {
                return this.IsNull(this.tableRew_RepairZone.RZone_Name_EngColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_Name_EngNull() {
                this[this.tableRew_RepairZone.RZone_Name_EngColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_X1PosNull() {
                return this.IsNull(this.tableRew_RepairZone.RZone_X1PosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_X1PosNull() {
                this[this.tableRew_RepairZone.RZone_X1PosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_Y1PosNull() {
                return this.IsNull(this.tableRew_RepairZone.RZone_Y1PosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_Y1PosNull() {
                this[this.tableRew_RepairZone.RZone_Y1PosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_X2PosNull() {
                return this.IsNull(this.tableRew_RepairZone.RZone_X2PosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_X2PosNull() {
                this[this.tableRew_RepairZone.RZone_X2PosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_Y2PosNull() {
                return this.IsNull(this.tableRew_RepairZone.RZone_Y2PosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_Y2PosNull() {
                this[this.tableRew_RepairZone.RZone_Y2PosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRow[] GetRew_TerminalRows() {
                return ((Rew_TerminalRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_RepairZoneRew_Terminal"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow[] GetRew_ControlPointRows() {
                return ((Rew_ControlPointRow[])(base.GetChildRows(this.Table.ChildRelations["Rew_RepairZoneRew_ControlPoint"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_ScanerRow : System.Data.DataRow {
            
            private Rew_ScanerDataTable tableRew_Scaner;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_ScanerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_Scaner = ((Rew_ScanerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_id {
                get {
                    return ((int)(this[this.tableRew_Scaner.scan_idColumn]));
                }
                set {
                    this[this.tableRew_Scaner.scan_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cp_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Scaner.cp_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cp_id\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.cp_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cont_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Scaner.cont_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cont_id\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.cont_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scan_name {
                get {
                    try {
                        return ((string)(this[this.tableRew_Scaner.scan_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scan_name\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.scan_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_type {
                get {
                    try {
                        return ((int)(this[this.tableRew_Scaner.scan_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scan_type\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.scan_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_adress {
                get {
                    try {
                        return ((int)(this[this.tableRew_Scaner.scan_adressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scan_adress\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.scan_adressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_XPos {
                get {
                    try {
                        return ((int)(this[this.tableRew_Scaner.scan_XPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scan_XPos\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.scan_XPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scan_YPos {
                get {
                    try {
                        return ((int)(this[this.tableRew_Scaner.scan_YPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scan_YPos\' in table \'Rew_Scaner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Scaner.scan_YPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow Rew_ControllerRow {
                get {
                    return ((Rew_ControllerRow)(this.GetParentRow(this.Table.ParentRelations["Rew_ControllerRew_Scaner"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_ControllerRew_Scaner"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow Rew_ControlPointRow {
                get {
                    return ((Rew_ControlPointRow)(this.GetParentRow(this.Table.ParentRelations["Rew_ControlPointRew_Scaner"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_ControlPointRew_Scaner"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscp_idNull() {
                return this.IsNull(this.tableRew_Scaner.cp_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcp_idNull() {
                this[this.tableRew_Scaner.cp_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscont_idNull() {
                return this.IsNull(this.tableRew_Scaner.cont_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcont_idNull() {
                this[this.tableRew_Scaner.cont_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_nameNull() {
                return this.IsNull(this.tableRew_Scaner.scan_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_nameNull() {
                this[this.tableRew_Scaner.scan_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_typeNull() {
                return this.IsNull(this.tableRew_Scaner.scan_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_typeNull() {
                this[this.tableRew_Scaner.scan_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_adressNull() {
                return this.IsNull(this.tableRew_Scaner.scan_adressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_adressNull() {
                this[this.tableRew_Scaner.scan_adressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_XPosNull() {
                return this.IsNull(this.tableRew_Scaner.scan_XPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_XPosNull() {
                this[this.tableRew_Scaner.scan_XPosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscan_YPosNull() {
                return this.IsNull(this.tableRew_Scaner.scan_YPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscan_YPosNull() {
                this[this.tableRew_Scaner.scan_YPosColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_SensorRow : System.Data.DataRow {
            
            private Rew_SensorDataTable tableRew_Sensor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_SensorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_Sensor = ((Rew_SensorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sens_id {
                get {
                    return ((int)(this[this.tableRew_Sensor.sens_idColumn]));
                }
                set {
                    this[this.tableRew_Sensor.sens_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cp_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Sensor.cp_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cp_id\' in table \'Rew_Sensor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Sensor.cp_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cont_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Sensor.Cont_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cont_id\' in table \'Rew_Sensor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Sensor.Cont_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sens_type {
                get {
                    try {
                        return ((int)(this[this.tableRew_Sensor.sens_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sens_type\' in table \'Rew_Sensor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Sensor.sens_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sens_adress {
                get {
                    try {
                        return ((int)(this[this.tableRew_Sensor.sens_adressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sens_adress\' in table \'Rew_Sensor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Sensor.sens_adressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow Rew_ControllerRow {
                get {
                    return ((Rew_ControllerRow)(this.GetParentRow(this.Table.ParentRelations["Rew_ControllerRew_Sensor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_ControllerRew_Sensor"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow Rew_ControlPointRow {
                get {
                    return ((Rew_ControlPointRow)(this.GetParentRow(this.Table.ParentRelations["Rew_ControlPointRew_Sensor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_ControlPointRew_Sensor"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscp_idNull() {
                return this.IsNull(this.tableRew_Sensor.cp_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcp_idNull() {
                this[this.tableRew_Sensor.cp_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCont_idNull() {
                return this.IsNull(this.tableRew_Sensor.Cont_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCont_idNull() {
                this[this.tableRew_Sensor.Cont_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issens_typeNull() {
                return this.IsNull(this.tableRew_Sensor.sens_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsens_typeNull() {
                this[this.tableRew_Sensor.sens_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issens_adressNull() {
                return this.IsNull(this.tableRew_Sensor.sens_adressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsens_adressNull() {
                this[this.tableRew_Sensor.sens_adressColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rew_TerminalRow : System.Data.DataRow {
            
            private Rew_TerminalDataTable tableRew_Terminal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rew_TerminalRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRew_Terminal = ((Rew_TerminalDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int term_id {
                get {
                    return ((int)(this[this.tableRew_Terminal.term_idColumn]));
                }
                set {
                    this[this.tableRew_Terminal.term_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RZone_id {
                get {
                    try {
                        return ((int)(this[this.tableRew_Terminal.RZone_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RZone_id\' in table \'Rew_Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Terminal.RZone_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string term_name {
                get {
                    try {
                        return ((string)(this[this.tableRew_Terminal.term_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'term_name\' in table \'Rew_Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Terminal.term_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string term_IP {
                get {
                    try {
                        return ((string)(this[this.tableRew_Terminal.term_IPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'term_IP\' in table \'Rew_Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Terminal.term_IPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int term_XPos {
                get {
                    try {
                        return ((int)(this[this.tableRew_Terminal.term_XPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'term_XPos\' in table \'Rew_Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Terminal.term_XPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int term_YPos {
                get {
                    try {
                        return ((int)(this[this.tableRew_Terminal.term_YPosColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'term_YPos\' in table \'Rew_Terminal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRew_Terminal.term_YPosColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow Rew_RepairZoneRow {
                get {
                    return ((Rew_RepairZoneRow)(this.GetParentRow(this.Table.ParentRelations["Rew_RepairZoneRew_Terminal"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Rew_RepairZoneRew_Terminal"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRZone_idNull() {
                return this.IsNull(this.tableRew_Terminal.RZone_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRZone_idNull() {
                this[this.tableRew_Terminal.RZone_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isterm_nameNull() {
                return this.IsNull(this.tableRew_Terminal.term_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setterm_nameNull() {
                this[this.tableRew_Terminal.term_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isterm_IPNull() {
                return this.IsNull(this.tableRew_Terminal.term_IPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setterm_IPNull() {
                this[this.tableRew_Terminal.term_IPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isterm_XPosNull() {
                return this.IsNull(this.tableRew_Terminal.term_XPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setterm_XPosNull() {
                this[this.tableRew_Terminal.term_XPosColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isterm_YPosNull() {
                return this.IsNull(this.tableRew_Terminal.term_YPosColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setterm_YPosNull() {
                this[this.tableRew_Terminal.term_YPosColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_ControllerRowChangeEvent : System.EventArgs {
            
            private Rew_ControllerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRowChangeEvent(Rew_ControllerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControllerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_ControlPointRowChangeEvent : System.EventArgs {
            
            private Rew_ControlPointRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRowChangeEvent(Rew_ControlPointRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ControlPointRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_LockerRowChangeEvent : System.EventArgs {
            
            private Rew_LockerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRowChangeEvent(Rew_LockerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_LockerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_PlantRowChangeEvent : System.EventArgs {
            
            private Rew_PlantRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRowChangeEvent(Rew_PlantRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_PlantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_RepairZoneRowChangeEvent : System.EventArgs {
            
            private Rew_RepairZoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRowChangeEvent(Rew_RepairZoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_RepairZoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_ScanerRowChangeEvent : System.EventArgs {
            
            private Rew_ScanerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRowChangeEvent(Rew_ScanerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_ScanerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_SensorRowChangeEvent : System.EventArgs {
            
            private Rew_SensorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRowChangeEvent(Rew_SensorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_SensorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Rew_TerminalRowChangeEvent : System.EventArgs {
            
            private Rew_TerminalRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRowChangeEvent(Rew_TerminalRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rew_TerminalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DllTest.ReworksDBDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_ControllerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_ControllerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_Controller";
            tableMapping.ColumnMappings.Add("cont_id", "cont_id");
            tableMapping.ColumnMappings.Add("pl_id", "pl_id");
            tableMapping.ColumnMappings.Add("cont_name", "cont_name");
            tableMapping.ColumnMappings.Add("cont_IP", "cont_IP");
            tableMapping.ColumnMappings.Add("cont_XPos", "cont_XPos");
            tableMapping.ColumnMappings.Add("cont_YPos", "cont_YPos");
            tableMapping.ColumnMappings.Add("InputCoilStartAddress", "InputCoilStartAddress");
            tableMapping.ColumnMappings.Add("InputCoilUnitCount", "InputCoilUnitCount");
            tableMapping.ColumnMappings.Add("OutputCoilStartAddress", "OutputCoilStartAddress");
            tableMapping.ColumnMappings.Add("OutputCoilUnitCount", "OutputCoilUnitCount");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Rew_Controller` WHERE ((`cont_id` = ?) AND ((? = 1 AND `pl_id` IS NULL) OR (`pl_id` = ?)) AND ((? = 1 AND `cont_name` IS NULL) OR (`cont_name` = ?)) AND ((? = 1 AND `cont_IP` IS NULL) OR (`cont_IP` = ?)) AND ((? = 1 AND `cont_XPos` IS NULL) OR (`cont_XPos` = ?)) AND ((? = 1 AND `cont_YPos` IS NULL) OR (`cont_YPos` = ?)) AND ((? = 1 AND `InputCoilStartAddress` IS NULL) OR (`InputCoilStartAddress` = ?)) AND ((? = 1 AND `InputCoilUnitCount` IS NULL) OR (`InputCoilUnitCount` = ?)) AND ((? = 1 AND `OutputCoilStartAddress` IS NULL) OR (`OutputCoilStartAddress` = ?)) AND ((? = 1 AND `OutputCoilUnitCount` IS NULL) OR (`OutputCoilUnitCount` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_IP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_IP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_InputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilStartAddress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_InputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilStartAddress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_InputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilUnitCount", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_InputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilUnitCount", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OutputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilStartAddress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OutputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilStartAddress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OutputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilUnitCount", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OutputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilUnitCount", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_Controller` (`cont_id`, `pl_id`, `cont_name`, `cont_IP`, `cont_X" +
                "Pos`, `cont_YPos`, `InputCoilStartAddress`, `InputCoilUnitCount`, `OutputCoilSta" +
                "rtAddress`, `OutputCoilUnitCount`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("InputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilStartAddress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("InputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilUnitCount", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OutputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilStartAddress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OutputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilUnitCount", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_Controller` SET `cont_id` = ?, `pl_id` = ?, `cont_name` = ?, `cont_IP` = ?, `cont_XPos` = ?, `cont_YPos` = ?, `InputCoilStartAddress` = ?, `InputCoilUnitCount` = ?, `OutputCoilStartAddress` = ?, `OutputCoilUnitCount` = ? WHERE ((`cont_id` = ?) AND ((? = 1 AND `pl_id` IS NULL) OR (`pl_id` = ?)) AND ((? = 1 AND `cont_name` IS NULL) OR (`cont_name` = ?)) AND ((? = 1 AND `cont_IP` IS NULL) OR (`cont_IP` = ?)) AND ((? = 1 AND `cont_XPos` IS NULL) OR (`cont_XPos` = ?)) AND ((? = 1 AND `cont_YPos` IS NULL) OR (`cont_YPos` = ?)) AND ((? = 1 AND `InputCoilStartAddress` IS NULL) OR (`InputCoilStartAddress` = ?)) AND ((? = 1 AND `InputCoilUnitCount` IS NULL) OR (`InputCoilUnitCount` = ?)) AND ((? = 1 AND `OutputCoilStartAddress` IS NULL) OR (`OutputCoilStartAddress` = ?)) AND ((? = 1 AND `OutputCoilUnitCount` IS NULL) OR (`OutputCoilUnitCount` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("InputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilStartAddress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("InputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilUnitCount", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OutputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilStartAddress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OutputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilUnitCount", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_IP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_IP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_InputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilStartAddress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_InputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilStartAddress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_InputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilUnitCount", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_InputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "InputCoilUnitCount", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OutputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilStartAddress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OutputCoilStartAddress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilStartAddress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OutputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilUnitCount", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OutputCoilUnitCount", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OutputCoilUnitCount", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT cont_id, pl_id, cont_name, cont_IP, cont_XPos, cont_YPos, InputCoilStartAd" +
                "dress, InputCoilUnitCount, OutputCoilStartAddress, OutputCoilUnitCount FROM Rew_" +
                "Controller";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    Rew_Controller\r\nSET              cont_XPos = ?, cont_YPos = ?\r\nWHERE   " +
                "  (cont_id = ?)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_XPos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_YPos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_ControllerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_ControllerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_ControllerDataTable dataTable = new ReworksDBDataSet.Rew_ControllerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_ControllerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_Controller");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_cont_id, System.Nullable<int> Original_pl_id, string Original_cont_name, string Original_cont_IP, System.Nullable<int> Original_cont_XPos, System.Nullable<int> Original_cont_YPos, System.Nullable<int> Original_InputCoilStartAddress, System.Nullable<int> Original_InputCoilUnitCount, System.Nullable<int> Original_OutputCoilStartAddress, System.Nullable<int> Original_OutputCoilUnitCount) {
            if ((Original_cont_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_cont_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_pl_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_pl_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_cont_name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_cont_name));
            }
            if ((Original_cont_IP == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_cont_IP));
            }
            if ((Original_cont_XPos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_cont_XPos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_cont_YPos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_cont_YPos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_InputCoilStartAddress.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_InputCoilStartAddress.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_InputCoilUnitCount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_InputCoilUnitCount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_OutputCoilStartAddress.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_OutputCoilStartAddress.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_OutputCoilUnitCount.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_OutputCoilUnitCount.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> cont_id, System.Nullable<int> pl_id, string cont_name, string cont_IP, System.Nullable<int> cont_XPos, System.Nullable<int> cont_YPos, System.Nullable<int> InputCoilStartAddress, System.Nullable<int> InputCoilUnitCount, System.Nullable<int> OutputCoilStartAddress, System.Nullable<int> OutputCoilUnitCount) {
            if ((cont_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(cont_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((pl_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(pl_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cont_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(cont_name));
            }
            if ((cont_IP == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(cont_IP));
            }
            if ((cont_XPos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(cont_XPos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((cont_YPos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(cont_YPos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((InputCoilStartAddress.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(InputCoilStartAddress.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((InputCoilUnitCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(InputCoilUnitCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((OutputCoilStartAddress.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(OutputCoilStartAddress.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((OutputCoilUnitCount.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(OutputCoilUnitCount.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Nullable<int> cont_id, 
                    System.Nullable<int> pl_id, 
                    string cont_name, 
                    string cont_IP, 
                    System.Nullable<int> cont_XPos, 
                    System.Nullable<int> cont_YPos, 
                    System.Nullable<int> InputCoilStartAddress, 
                    System.Nullable<int> InputCoilUnitCount, 
                    System.Nullable<int> OutputCoilStartAddress, 
                    System.Nullable<int> OutputCoilUnitCount, 
                    System.Nullable<int> Original_cont_id, 
                    System.Nullable<int> Original_pl_id, 
                    string Original_cont_name, 
                    string Original_cont_IP, 
                    System.Nullable<int> Original_cont_XPos, 
                    System.Nullable<int> Original_cont_YPos, 
                    System.Nullable<int> Original_InputCoilStartAddress, 
                    System.Nullable<int> Original_InputCoilUnitCount, 
                    System.Nullable<int> Original_OutputCoilStartAddress, 
                    System.Nullable<int> Original_OutputCoilUnitCount) {
            if ((cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((pl_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(pl_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cont_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(cont_name));
            }
            if ((cont_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(cont_IP));
            }
            if ((cont_XPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(cont_XPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((cont_YPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(cont_YPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((InputCoilStartAddress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(InputCoilStartAddress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((InputCoilUnitCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(InputCoilUnitCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((OutputCoilStartAddress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(OutputCoilStartAddress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((OutputCoilUnitCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(OutputCoilUnitCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_pl_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_pl_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_cont_name == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_cont_name));
            }
            if ((Original_cont_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_cont_IP));
            }
            if ((Original_cont_XPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_cont_XPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_cont_YPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_cont_YPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_InputCoilStartAddress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_InputCoilStartAddress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_InputCoilUnitCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_InputCoilUnitCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_OutputCoilStartAddress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_OutputCoilStartAddress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
            }
            if ((Original_OutputCoilUnitCount.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_OutputCoilUnitCount.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePos(System.Nullable<int> cont_XPos, System.Nullable<int> cont_YPos, System.Nullable<int> Original_cont_id) {
            System.Data.OleDb.OleDbCommand command = this.CommandCollection[1];
            if ((cont_XPos.HasValue == true)) {
                command.Parameters[0].Value = ((int)(cont_XPos.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cont_YPos.HasValue == true)) {
                command.Parameters[1].Value = ((int)(cont_YPos.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_cont_id.HasValue == true)) {
                command.Parameters[2].Value = ((int)(Original_cont_id.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_ControlPointTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_ControlPointTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_ControlPoint";
            tableMapping.ColumnMappings.Add("cp_id", "cp_id");
            tableMapping.ColumnMappings.Add("RZone_id", "RZone_id");
            tableMapping.ColumnMappings.Add("cp_name", "cp_name");
            tableMapping.ColumnMappings.Add("cp_type", "cp_type");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `Rew_ControlPoint` WHERE ((`cp_id` = ?) AND ((? = 1 AND `RZone_id` IS" +
                " NULL) OR (`RZone_id` = ?)) AND ((? = 1 AND `cp_name` IS NULL) OR (`cp_name` = ?" +
                ")) AND ((? = 1 AND `cp_type` IS NULL) OR (`cp_type` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_ControlPoint` (`cp_id`, `RZone_id`, `cp_name`, `cp_type`) VALUES" +
                " (?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_ControlPoint` SET `cp_id` = ?, `RZone_id` = ?, `cp_name` = ?, `cp_type` = ? WHERE ((`cp_id` = ?) AND ((? = 1 AND `RZone_id` IS NULL) OR (`RZone_id` = ?)) AND ((? = 1 AND `cp_name` IS NULL) OR (`cp_name` = ?)) AND ((? = 1 AND `cp_type` IS NULL) OR (`cp_type` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_type", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT cp_id, RZone_id, cp_name, cp_type FROM Rew_ControlPoint";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_ControlPointDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_ControlPointDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_ControlPointDataTable dataTable = new ReworksDBDataSet.Rew_ControlPointDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_ControlPointDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_ControlPoint");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_cp_id, System.Nullable<int> Original_RZone_id, string Original_cp_name, System.Nullable<int> Original_cp_type) {
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_RZone_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_cp_name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_cp_name));
            }
            if ((Original_cp_type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_cp_type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> cp_id, System.Nullable<int> RZone_id, string cp_name, System.Nullable<int> cp_type) {
            if ((cp_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((RZone_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(RZone_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cp_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(cp_name));
            }
            if ((cp_type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(cp_type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> cp_id, System.Nullable<int> RZone_id, string cp_name, System.Nullable<int> cp_type, System.Nullable<int> Original_cp_id, System.Nullable<int> Original_RZone_id, string Original_cp_name, System.Nullable<int> Original_cp_type) {
            if ((cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((RZone_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(RZone_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cp_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(cp_name));
            }
            if ((cp_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(cp_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_RZone_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_cp_name == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_cp_name));
            }
            if ((Original_cp_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_cp_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_LockerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_LockerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_Locker";
            tableMapping.ColumnMappings.Add("loc_id", "loc_id");
            tableMapping.ColumnMappings.Add("cont_id", "cont_id");
            tableMapping.ColumnMappings.Add("cp_id", "cp_id");
            tableMapping.ColumnMappings.Add("loc_type", "loc_type");
            tableMapping.ColumnMappings.Add("loc_adress", "loc_adress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Rew_Locker` WHERE ((`loc_id` = ?) AND ((? = 1 AND `cont_id` IS NULL) OR (`cont_id` = ?)) AND ((? = 1 AND `cp_id` IS NULL) OR (`cp_id` = ?)) AND ((? = 1 AND `loc_type` IS NULL) OR (`loc_type` = ?)) AND ((? = 1 AND `loc_adress` IS NULL) OR (`loc_adress` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_loc_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_loc_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_loc_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_loc_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_adress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_loc_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_adress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_Locker` (`loc_id`, `cont_id`, `cp_id`, `loc_type`, `loc_adress`)" +
                " VALUES (?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("loc_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("loc_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("loc_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_adress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_Locker` SET `loc_id` = ?, `cont_id` = ?, `cp_id` = ?, `loc_type` = ?, `loc_adress` = ? WHERE ((`loc_id` = ?) AND ((? = 1 AND `cont_id` IS NULL) OR (`cont_id` = ?)) AND ((? = 1 AND `cp_id` IS NULL) OR (`cp_id` = ?)) AND ((? = 1 AND `loc_type` IS NULL) OR (`loc_type` = ?)) AND ((? = 1 AND `loc_adress` IS NULL) OR (`loc_adress` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("loc_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("loc_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("loc_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_adress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_loc_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_loc_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_loc_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_loc_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_adress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_loc_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "loc_adress", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT loc_id, cont_id, cp_id, loc_type, loc_adress FROM Rew_Locker";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_LockerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_LockerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_LockerDataTable dataTable = new ReworksDBDataSet.Rew_LockerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_LockerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_Locker");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_loc_id, System.Nullable<int> Original_cont_id, System.Nullable<int> Original_cp_id, System.Nullable<int> Original_loc_type, System.Nullable<int> Original_loc_adress) {
            if ((Original_loc_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_loc_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_cont_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_cont_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_loc_type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_loc_type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_loc_adress.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_loc_adress.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> loc_id, System.Nullable<int> cont_id, System.Nullable<int> cp_id, System.Nullable<int> loc_type, System.Nullable<int> loc_adress) {
            if ((loc_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(loc_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cont_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(cont_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cp_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((loc_type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(loc_type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((loc_adress.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(loc_adress.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> loc_id, System.Nullable<int> cont_id, System.Nullable<int> cp_id, System.Nullable<int> loc_type, System.Nullable<int> loc_adress, System.Nullable<int> Original_loc_id, System.Nullable<int> Original_cont_id, System.Nullable<int> Original_cp_id, System.Nullable<int> Original_loc_type, System.Nullable<int> Original_loc_adress) {
            if ((loc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(loc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((loc_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(loc_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((loc_adress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(loc_adress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_loc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_loc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_loc_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_loc_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_loc_adress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_loc_adress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_PlantTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_PlantTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_Plant";
            tableMapping.ColumnMappings.Add("pl_id", "pl_id");
            tableMapping.ColumnMappings.Add("pl_name", "pl_name");
            tableMapping.ColumnMappings.Add("pl_name_eng", "pl_name_eng");
            tableMapping.ColumnMappings.Add("pl_corp_id", "pl_corp_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `Rew_Plant` WHERE ((`pl_id` = ?) AND ((? = 1 AND `pl_name` IS NULL) O" +
                "R (`pl_name` = ?)) AND ((? = 1 AND `pl_name_eng` IS NULL) OR (`pl_name_eng` = ?)" +
                ") AND ((? = 1 AND `pl_corp_id` IS NULL) OR (`pl_corp_id` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_name_eng", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name_eng", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_name_eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name_eng", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_corp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_corp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_corp_id", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_corp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_Plant` (`pl_id`, `pl_name`, `pl_name_eng`, `pl_corp_id`) VALUES " +
                "(?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_name_eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name_eng", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_corp_id", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_corp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_Plant` SET `pl_id` = ?, `pl_name` = ?, `pl_name_eng` = ?, `pl_corp_id` = ? WHERE ((`pl_id` = ?) AND ((? = 1 AND `pl_name` IS NULL) OR (`pl_name` = ?)) AND ((? = 1 AND `pl_name_eng` IS NULL) OR (`pl_name_eng` = ?)) AND ((? = 1 AND `pl_corp_id` IS NULL) OR (`pl_corp_id` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_name_eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name_eng", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_corp_id", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_corp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_name_eng", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name_eng", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_name_eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_name_eng", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_corp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_corp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_corp_id", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_corp_id", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pl_id, pl_name, pl_name_eng, pl_corp_id FROM Rew_Plant";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_PlantDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_PlantDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_PlantDataTable dataTable = new ReworksDBDataSet.Rew_PlantDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_PlantDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_Plant");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_pl_id, string Original_pl_name, string Original_pl_name_eng, string Original_pl_corp_id) {
            if ((Original_pl_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pl_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_pl_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_pl_name));
            }
            if ((Original_pl_name_eng == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_pl_name_eng));
            }
            if ((Original_pl_corp_id == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_pl_corp_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> pl_id, string pl_name, string pl_name_eng, string pl_corp_id) {
            if ((pl_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pl_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((pl_name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(pl_name));
            }
            if ((pl_name_eng == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(pl_name_eng));
            }
            if ((pl_corp_id == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(pl_corp_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> pl_id, string pl_name, string pl_name_eng, string pl_corp_id, System.Nullable<int> Original_pl_id, string Original_pl_name, string Original_pl_name_eng, string Original_pl_corp_id) {
            if ((pl_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pl_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((pl_name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(pl_name));
            }
            if ((pl_name_eng == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(pl_name_eng));
            }
            if ((pl_corp_id == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(pl_corp_id));
            }
            if ((Original_pl_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_pl_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_pl_name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_pl_name));
            }
            if ((Original_pl_name_eng == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_pl_name_eng));
            }
            if ((Original_pl_corp_id == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_pl_corp_id));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_RepairZoneTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_RepairZoneTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_RepairZone";
            tableMapping.ColumnMappings.Add("RZone_id", "RZone_id");
            tableMapping.ColumnMappings.Add("pl_id", "pl_id");
            tableMapping.ColumnMappings.Add("RZone_Name", "RZone_Name");
            tableMapping.ColumnMappings.Add("RZone_Name_Eng", "RZone_Name_Eng");
            tableMapping.ColumnMappings.Add("RZone_X1Pos", "RZone_X1Pos");
            tableMapping.ColumnMappings.Add("RZone_Y1Pos", "RZone_Y1Pos");
            tableMapping.ColumnMappings.Add("RZone_X2Pos", "RZone_X2Pos");
            tableMapping.ColumnMappings.Add("RZone_Y2Pos", "RZone_Y2Pos");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Rew_RepairZone` WHERE ((`RZone_id` = ?) AND ((? = 1 AND `pl_id` IS NULL) OR (`pl_id` = ?)) AND ((? = 1 AND `RZone_Name` IS NULL) OR (`RZone_Name` = ?)) AND ((? = 1 AND `RZone_Name_Eng` IS NULL) OR (`RZone_Name_Eng` = ?)) AND ((? = 1 AND `RZone_X1Pos` IS NULL) OR (`RZone_X1Pos` = ?)) AND ((? = 1 AND `RZone_Y1Pos` IS NULL) OR (`RZone_Y1Pos` = ?)) AND ((? = 1 AND `RZone_X2Pos` IS NULL) OR (`RZone_X2Pos` = ?)) AND ((? = 1 AND `RZone_Y2Pos` IS NULL) OR (`RZone_Y2Pos` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Name_Eng", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name_Eng", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Name_Eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name_Eng", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_RepairZone` (`RZone_id`, `pl_id`, `RZone_Name`, `RZone_Name_Eng`" +
                ", `RZone_X1Pos`, `RZone_Y1Pos`, `RZone_X2Pos`, `RZone_Y2Pos`) VALUES (?, ?, ?, ?" +
                ", ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Name_Eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name_Eng", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_RepairZone` SET `RZone_id` = ?, `pl_id` = ?, `RZone_Name` = ?, `RZone_Name_Eng` = ?, `RZone_X1Pos` = ?, `RZone_Y1Pos` = ?, `RZone_X2Pos` = ?, `RZone_Y2Pos` = ? WHERE ((`RZone_id` = ?) AND ((? = 1 AND `pl_id` IS NULL) OR (`pl_id` = ?)) AND ((? = 1 AND `RZone_Name` IS NULL) OR (`RZone_Name` = ?)) AND ((? = 1 AND `RZone_Name_Eng` IS NULL) OR (`RZone_Name_Eng` = ?)) AND ((? = 1 AND `RZone_X1Pos` IS NULL) OR (`RZone_X1Pos` = ?)) AND ((? = 1 AND `RZone_Y1Pos` IS NULL) OR (`RZone_Y1Pos` = ?)) AND ((? = 1 AND `RZone_X2Pos` IS NULL) OR (`RZone_X2Pos` = ?)) AND ((? = 1 AND `RZone_Y2Pos` IS NULL) OR (`RZone_Y2Pos` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Name_Eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name_Eng", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_pl_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "pl_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Name_Eng", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name_Eng", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Name_Eng", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Name_Eng", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RZone_id, pl_id, RZone_Name, RZone_Name_Eng, RZone_X1Pos, RZone_Y1Pos, RZo" +
                "ne_X2Pos, RZone_Y2Pos FROM Rew_RepairZone";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    Rew_RepairZone\r\nSET              RZone_X1Pos = ?, RZone_Y1Pos = ?, RZon" +
                "e_X2Pos = ?, RZone_Y2Pos = ?\r\nWHERE     (RZone_id = ?)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_X1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X1Pos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Y1Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y1Pos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_X2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_X2Pos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_Y2Pos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_Y2Pos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_RepairZoneDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_RepairZoneDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_RepairZoneDataTable dataTable = new ReworksDBDataSet.Rew_RepairZoneDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_RepairZoneDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_RepairZone");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_RZone_id, System.Nullable<int> Original_pl_id, string Original_RZone_Name, string Original_RZone_Name_Eng, System.Nullable<int> Original_RZone_X1Pos, System.Nullable<int> Original_RZone_Y1Pos, System.Nullable<int> Original_RZone_X2Pos, System.Nullable<int> Original_RZone_Y2Pos) {
            if ((Original_RZone_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_pl_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_pl_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_RZone_Name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_RZone_Name));
            }
            if ((Original_RZone_Name_Eng == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_RZone_Name_Eng));
            }
            if ((Original_RZone_X1Pos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_RZone_X1Pos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_RZone_Y1Pos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_RZone_Y1Pos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_RZone_X2Pos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_RZone_X2Pos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_RZone_Y2Pos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_RZone_Y2Pos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> RZone_id, System.Nullable<int> pl_id, string RZone_Name, string RZone_Name_Eng, System.Nullable<int> RZone_X1Pos, System.Nullable<int> RZone_Y1Pos, System.Nullable<int> RZone_X2Pos, System.Nullable<int> RZone_Y2Pos) {
            if ((RZone_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(RZone_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((pl_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(pl_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((RZone_Name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RZone_Name));
            }
            if ((RZone_Name_Eng == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(RZone_Name_Eng));
            }
            if ((RZone_X1Pos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(RZone_X1Pos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((RZone_Y1Pos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(RZone_Y1Pos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((RZone_X2Pos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(RZone_X2Pos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RZone_Y2Pos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(RZone_Y2Pos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Nullable<int> RZone_id, 
                    System.Nullable<int> pl_id, 
                    string RZone_Name, 
                    string RZone_Name_Eng, 
                    System.Nullable<int> RZone_X1Pos, 
                    System.Nullable<int> RZone_Y1Pos, 
                    System.Nullable<int> RZone_X2Pos, 
                    System.Nullable<int> RZone_Y2Pos, 
                    System.Nullable<int> Original_RZone_id, 
                    System.Nullable<int> Original_pl_id, 
                    string Original_RZone_Name, 
                    string Original_RZone_Name_Eng, 
                    System.Nullable<int> Original_RZone_X1Pos, 
                    System.Nullable<int> Original_RZone_Y1Pos, 
                    System.Nullable<int> Original_RZone_X2Pos, 
                    System.Nullable<int> Original_RZone_Y2Pos) {
            if ((RZone_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(RZone_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((pl_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(pl_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((RZone_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RZone_Name));
            }
            if ((RZone_Name_Eng == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(RZone_Name_Eng));
            }
            if ((RZone_X1Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(RZone_X1Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((RZone_Y1Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(RZone_Y1Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((RZone_X2Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(RZone_X2Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RZone_Y2Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(RZone_Y2Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_RZone_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_pl_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_pl_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_RZone_Name == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_RZone_Name));
            }
            if ((Original_RZone_Name_Eng == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_RZone_Name_Eng));
            }
            if ((Original_RZone_X1Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_RZone_X1Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_RZone_Y1Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_RZone_Y1Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_RZone_X2Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_RZone_X2Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_RZone_Y2Pos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_RZone_Y2Pos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePos(System.Nullable<int> RZone_X1Pos, System.Nullable<int> RZone_Y1Pos, System.Nullable<int> RZone_X2Pos, System.Nullable<int> RZone_Y2Pos, System.Nullable<int> Original_RZone_id) {
            System.Data.OleDb.OleDbCommand command = this.CommandCollection[1];
            if ((RZone_X1Pos.HasValue == true)) {
                command.Parameters[0].Value = ((int)(RZone_X1Pos.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((RZone_Y1Pos.HasValue == true)) {
                command.Parameters[1].Value = ((int)(RZone_Y1Pos.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((RZone_X2Pos.HasValue == true)) {
                command.Parameters[2].Value = ((int)(RZone_X2Pos.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((RZone_Y2Pos.HasValue == true)) {
                command.Parameters[3].Value = ((int)(RZone_Y2Pos.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_RZone_id.HasValue == true)) {
                command.Parameters[4].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_ScanerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_ScanerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_Scaner";
            tableMapping.ColumnMappings.Add("scan_id", "scan_id");
            tableMapping.ColumnMappings.Add("cp_id", "cp_id");
            tableMapping.ColumnMappings.Add("cont_id", "cont_id");
            tableMapping.ColumnMappings.Add("scan_name", "scan_name");
            tableMapping.ColumnMappings.Add("scan_type", "scan_type");
            tableMapping.ColumnMappings.Add("scan_adress", "scan_adress");
            tableMapping.ColumnMappings.Add("scan_XPos", "scan_XPos");
            tableMapping.ColumnMappings.Add("scan_YPos", "scan_YPos");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Rew_Scaner` WHERE ((`scan_id` = ?) AND ((? = 1 AND `cp_id` IS NULL) OR (`cp_id` = ?)) AND ((? = 1 AND `cont_id` IS NULL) OR (`cont_id` = ?)) AND ((? = 1 AND `scan_name` IS NULL) OR (`scan_name` = ?)) AND ((? = 1 AND `scan_type` IS NULL) OR (`scan_type` = ?)) AND ((? = 1 AND `scan_adress` IS NULL) OR (`scan_adress` = ?)) AND ((? = 1 AND `scan_XPos` IS NULL) OR (`scan_XPos` = ?)) AND ((? = 1 AND `scan_YPos` IS NULL) OR (`scan_YPos` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_adress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_adress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_Scaner` (`scan_id`, `cp_id`, `cont_id`, `scan_name`, `scan_type`" +
                ", `scan_adress`, `scan_XPos`, `scan_YPos`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_adress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_Scaner` SET `scan_id` = ?, `cp_id` = ?, `cont_id` = ?, `scan_name` = ?, `scan_type` = ?, `scan_adress` = ?, `scan_XPos` = ?, `scan_YPos` = ? WHERE ((`scan_id` = ?) AND ((? = 1 AND `cp_id` IS NULL) OR (`cp_id` = ?)) AND ((? = 1 AND `cont_id` IS NULL) OR (`cont_id` = ?)) AND ((? = 1 AND `scan_name` IS NULL) OR (`scan_name` = ?)) AND ((? = 1 AND `scan_type` IS NULL) OR (`scan_type` = ?)) AND ((? = 1 AND `scan_adress` IS NULL) OR (`scan_adress` = ?)) AND ((? = 1 AND `scan_XPos` IS NULL) OR (`scan_XPos` = ?)) AND ((? = 1 AND `scan_YPos` IS NULL) OR (`scan_YPos` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_adress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_adress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_adress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT scan_id, cp_id, cont_id, scan_name, scan_type, scan_adress, scan_XPos, sca" +
                "n_YPos FROM Rew_Scaner";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    Rew_Scaner\r\nSET              scan_XPos = ?, scan_YPos = ?\r\nWHERE     (s" +
                "can_id = ?)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_XPos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("scan_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_YPos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_scan_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "scan_id", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_ScanerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_ScanerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_ScanerDataTable dataTable = new ReworksDBDataSet.Rew_ScanerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_ScanerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_Scaner");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_scan_id, System.Nullable<int> Original_cp_id, System.Nullable<int> Original_cont_id, string Original_scan_name, System.Nullable<int> Original_scan_type, System.Nullable<int> Original_scan_adress, System.Nullable<int> Original_scan_XPos, System.Nullable<int> Original_scan_YPos) {
            if ((Original_scan_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_scan_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_cont_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_cont_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_scan_name == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_scan_name));
            }
            if ((Original_scan_type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_scan_type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_scan_adress.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_scan_adress.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_scan_XPos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_scan_XPos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_scan_YPos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_scan_YPos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> scan_id, System.Nullable<int> cp_id, System.Nullable<int> cont_id, string scan_name, System.Nullable<int> scan_type, System.Nullable<int> scan_adress, System.Nullable<int> scan_XPos, System.Nullable<int> scan_YPos) {
            if ((scan_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(scan_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cp_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cont_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(cont_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((scan_name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(scan_name));
            }
            if ((scan_type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(scan_type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((scan_adress.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(scan_adress.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((scan_XPos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(scan_XPos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((scan_YPos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(scan_YPos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Nullable<int> scan_id, 
                    System.Nullable<int> cp_id, 
                    System.Nullable<int> cont_id, 
                    string scan_name, 
                    System.Nullable<int> scan_type, 
                    System.Nullable<int> scan_adress, 
                    System.Nullable<int> scan_XPos, 
                    System.Nullable<int> scan_YPos, 
                    System.Nullable<int> Original_scan_id, 
                    System.Nullable<int> Original_cp_id, 
                    System.Nullable<int> Original_cont_id, 
                    string Original_scan_name, 
                    System.Nullable<int> Original_scan_type, 
                    System.Nullable<int> Original_scan_adress, 
                    System.Nullable<int> Original_scan_XPos, 
                    System.Nullable<int> Original_scan_YPos) {
            if ((scan_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(scan_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((scan_name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(scan_name));
            }
            if ((scan_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(scan_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((scan_adress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(scan_adress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((scan_XPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(scan_XPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((scan_YPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(scan_YPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_scan_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_scan_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_scan_name == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_scan_name));
            }
            if ((Original_scan_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_scan_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_scan_adress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_scan_adress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_scan_XPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_scan_XPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_scan_YPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_scan_YPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePos(System.Nullable<int> scan_XPos, System.Nullable<int> scan_YPos, System.Nullable<int> Original_scan_id) {
            System.Data.OleDb.OleDbCommand command = this.CommandCollection[1];
            if ((scan_XPos.HasValue == true)) {
                command.Parameters[0].Value = ((int)(scan_XPos.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((scan_YPos.HasValue == true)) {
                command.Parameters[1].Value = ((int)(scan_YPos.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_scan_id.HasValue == true)) {
                command.Parameters[2].Value = ((int)(Original_scan_id.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_SensorTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_SensorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_Sensor";
            tableMapping.ColumnMappings.Add("sens_id", "sens_id");
            tableMapping.ColumnMappings.Add("cp_id", "cp_id");
            tableMapping.ColumnMappings.Add("Cont_id", "Cont_id");
            tableMapping.ColumnMappings.Add("sens_type", "sens_type");
            tableMapping.ColumnMappings.Add("sens_adress", "sens_adress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Rew_Sensor` WHERE ((`sens_id` = ?) AND ((? = 1 AND `cp_id` IS NULL) OR (`cp_id` = ?)) AND ((? = 1 AND `Cont_id` IS NULL) OR (`Cont_id` = ?)) AND ((? = 1 AND `sens_type` IS NULL) OR (`sens_type` = ?)) AND ((? = 1 AND `sens_adress` IS NULL) OR (`sens_adress` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_sens_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_Cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Cont_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_sens_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_sens_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_sens_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_adress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_sens_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_adress", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_Sensor` (`sens_id`, `cp_id`, `Cont_id`, `sens_type`, `sens_adres" +
                "s`) VALUES (?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sens_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sens_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sens_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_adress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_Sensor` SET `sens_id` = ?, `cp_id` = ?, `Cont_id` = ?, `sens_type` = ?, `sens_adress` = ? WHERE ((`sens_id` = ?) AND ((? = 1 AND `cp_id` IS NULL) OR (`cp_id` = ?)) AND ((? = 1 AND `Cont_id` IS NULL) OR (`Cont_id` = ?)) AND ((? = 1 AND `sens_type` IS NULL) OR (`sens_type` = ?)) AND ((? = 1 AND `sens_adress` IS NULL) OR (`sens_adress` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sens_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Cont_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sens_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_type", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sens_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_adress", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_sens_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_cp_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "cp_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_Cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Cont_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_Cont_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Cont_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_sens_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_type", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_sens_type", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_type", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_sens_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_adress", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_sens_adress", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sens_adress", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT sens_id, cp_id, Cont_id, sens_type, sens_adress FROM Rew_Sensor";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_SensorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_SensorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_SensorDataTable dataTable = new ReworksDBDataSet.Rew_SensorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_SensorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_Sensor");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_sens_id, System.Nullable<int> Original_cp_id, System.Nullable<int> Original_Cont_id, System.Nullable<int> Original_sens_type, System.Nullable<int> Original_sens_adress) {
            if ((Original_sens_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_sens_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_Cont_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Cont_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_sens_type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_sens_type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_sens_adress.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_sens_adress.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> sens_id, System.Nullable<int> cp_id, System.Nullable<int> Cont_id, System.Nullable<int> sens_type, System.Nullable<int> sens_adress) {
            if ((sens_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(sens_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cp_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Cont_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Cont_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((sens_type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(sens_type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((sens_adress.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(sens_adress.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> sens_id, System.Nullable<int> cp_id, System.Nullable<int> Cont_id, System.Nullable<int> sens_type, System.Nullable<int> sens_adress, System.Nullable<int> Original_sens_id, System.Nullable<int> Original_cp_id, System.Nullable<int> Original_Cont_id, System.Nullable<int> Original_sens_type, System.Nullable<int> Original_sens_adress) {
            if ((sens_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(sens_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((sens_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(sens_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((sens_adress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(sens_adress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_sens_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_sens_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_cp_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_cp_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_Cont_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_Cont_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_sens_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_sens_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_sens_adress.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_sens_adress.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Rew_TerminalTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Rew_TerminalTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Rew_Terminal";
            tableMapping.ColumnMappings.Add("term_id", "term_id");
            tableMapping.ColumnMappings.Add("RZone_id", "RZone_id");
            tableMapping.ColumnMappings.Add("term_name", "term_name");
            tableMapping.ColumnMappings.Add("term_IP", "term_IP");
            tableMapping.ColumnMappings.Add("term_XPos", "term_XPos");
            tableMapping.ColumnMappings.Add("term_YPos", "term_YPos");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Rew_Terminal` WHERE ((`term_id` = ?) AND ((? = 1 AND `RZone_id` IS NULL) OR (`RZone_id` = ?)) AND ((? = 1 AND `term_name` IS NULL) OR (`term_name` = ?)) AND ((? = 1 AND `term_IP` IS NULL) OR (`term_IP` = ?)) AND ((? = 1 AND `term_XPos` IS NULL) OR (`term_XPos` = ?)) AND ((? = 1 AND `term_YPos` IS NULL) OR (`term_YPos` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_IP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_IP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Rew_Terminal` (`term_id`, `RZone_id`, `term_name`, `term_IP`, `term_" +
                "XPos`, `term_YPos`) VALUES (?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Rew_Terminal` SET `term_id` = ?, `RZone_id` = ?, `term_name` = ?, `term_IP` = ?, `term_XPos` = ?, `term_YPos` = ? WHERE ((`term_id` = ?) AND ((? = 1 AND `RZone_id` IS NULL) OR (`RZone_id` = ?)) AND ((? = 1 AND `term_name` IS NULL) OR (`term_name` = ?)) AND ((? = 1 AND `term_IP` IS NULL) OR (`term_IP` = ?)) AND ((? = 1 AND `term_XPos` IS NULL) OR (`term_XPos` = ?)) AND ((? = 1 AND `term_YPos` IS NULL) OR (`term_YPos` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_name", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_IP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_RZone_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RZone_id", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_name", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_name", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_name", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_name", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_IP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_IP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_IP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_IP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DllTest.Properties.Settings.Default.ReworksDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[2];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT term_id, RZone_id, term_name, term_IP, term_XPos, term_YPos FROM Rew_Termi" +
                "nal";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "UPDATE    Rew_Terminal\r\nSET              term_XPos = ?, term_YPos = ?\r\nWHERE     " +
                "(term_id = ?)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("term_XPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_XPos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("term_YPos", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_YPos", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_term_id", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "term_id", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReworksDBDataSet.Rew_TerminalDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReworksDBDataSet.Rew_TerminalDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReworksDBDataSet.Rew_TerminalDataTable dataTable = new ReworksDBDataSet.Rew_TerminalDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet.Rew_TerminalDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ReworksDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Rew_Terminal");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_term_id, System.Nullable<int> Original_RZone_id, string Original_term_name, string Original_term_IP, System.Nullable<int> Original_term_XPos, System.Nullable<int> Original_term_YPos) {
            if ((Original_term_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_term_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((Original_RZone_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_term_name == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_term_name));
            }
            if ((Original_term_IP == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_term_IP));
            }
            if ((Original_term_XPos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_term_XPos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_term_YPos.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_term_YPos.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> term_id, System.Nullable<int> RZone_id, string term_name, string term_IP, System.Nullable<int> term_XPos, System.Nullable<int> term_YPos) {
            if ((term_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(term_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((RZone_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(RZone_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((term_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(term_name));
            }
            if ((term_IP == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(term_IP));
            }
            if ((term_XPos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(term_XPos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((term_YPos.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(term_YPos.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> term_id, System.Nullable<int> RZone_id, string term_name, string term_IP, System.Nullable<int> term_XPos, System.Nullable<int> term_YPos, System.Nullable<int> Original_term_id, System.Nullable<int> Original_RZone_id, string Original_term_name, string Original_term_IP, System.Nullable<int> Original_term_XPos, System.Nullable<int> Original_term_YPos) {
            if ((term_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(term_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((RZone_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(RZone_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((term_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(term_name));
            }
            if ((term_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(term_IP));
            }
            if ((term_XPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(term_XPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((term_YPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(term_YPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_term_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_term_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_RZone_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_RZone_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_term_name == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_term_name));
            }
            if ((Original_term_IP == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_term_IP));
            }
            if ((Original_term_XPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_term_XPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_term_YPos.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_term_YPos.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePos(System.Nullable<int> term_XPos, System.Nullable<int> term_YPos, System.Nullable<int> Original_term_id) {
            System.Data.OleDb.OleDbCommand command = this.CommandCollection[1];
            if ((term_XPos.HasValue == true)) {
                command.Parameters[0].Value = ((int)(term_XPos.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            if ((term_YPos.HasValue == true)) {
                command.Parameters[1].Value = ((int)(term_YPos.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_term_id.HasValue == true)) {
                command.Parameters[2].Value = ((int)(Original_term_id.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591